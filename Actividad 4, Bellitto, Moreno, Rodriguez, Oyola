{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/VainillaSheep/mi_hobby/blob/main/Actividad%204%2C%20Bellitto%2C%20Moreno%2C%20Rodriguez%2C%20Oyola\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "60d1c9e3-34d4-4278-9b6f-6deaa18bfa16",
      "metadata": {
        "id": "60d1c9e3-34d4-4278-9b6f-6deaa18bfa16"
      },
      "source": [
        "# Prácticas Profesionalizantes 2024\n",
        "EEST 9\n",
        "\n",
        "# Actividad 4\n",
        "\n",
        "#Conociendo qué es un dataset y qué datos contiene"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "HyDvHWoNS--n",
      "metadata": {
        "id": "HyDvHWoNS--n"
      },
      "source": [
        "## Trabajo en grupo entre 2 o 3 estudiantes\n",
        "Indicar los nombres y los links de los repositorios de la actividad 3 de los integrantes:\n",
        "* Lea - https://github.com/Oyola345/mi_hobby/tree/main\n",
        "* Tobías - https://github.com/Toberrrr/mi_hobby?authuser=0\n",
        "* Valentino - https://github.com/VainillaSheep/mi_hobby/blob/main/mi_hobby.md\n",
        "* Bautista - https://github.com/BautistaMoreno/mi_hobby"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "Nnb6G-PBrCdr",
      "metadata": {
        "id": "Nnb6G-PBrCdr"
      },
      "source": [
        "# Parte 1"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c16a0c86-50c0-44e7-b04c-bd96ecd19c71",
      "metadata": {
        "id": "c16a0c86-50c0-44e7-b04c-bd96ecd19c71"
      },
      "source": [
        "## 1.Investigue los siguientes sitios\n",
        "¿Qué formatos de archivos encuentra?\n",
        "* Datos Argentina https://www.datos.gob.ar\n",
        "* Censo 2022: https://censo.gob.ar/\n",
        "* Ministerio de Defensa: https://www.ign.gob.ar/NuestrasActividades/InformacionGeoespacial/CapasSIG\n",
        "* kaggle: https://www.kaggle.com/\n",
        "* World Data: https://ourworldindata.org/\n",
        "* Statista: https://www.statista.com/statistics/1401035/uk-social-media-users-by-education/\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e263e83a-b4ce-4b31-a5b6-39e2fa262c0f",
      "metadata": {
        "id": "e263e83a-b4ce-4b31-a5b6-39e2fa262c0f"
      },
      "source": [
        "Se encuentran los siguientes formatos:\n",
        "-xls\n",
        "-xlsx\n",
        "-pdf Y metadatos\n",
        "-csv\n",
        "-zip\n",
        "-SQLite\n",
        "-DTA\n",
        "-Json\n",
        "En las paginas worldata y estatista en lugar de estos archivos se encuentran graficos y mapas interactivos.\n",
        "En la web del ministerio de defensa se encuentran los siguientes formatos de archivos\n",
        "-shp\n",
        "-xml\n",
        "-geojson"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bb442f67-f07c-47ac-a502-c66215752936",
      "metadata": {
        "id": "bb442f67-f07c-47ac-a502-c66215752936"
      },
      "source": [
        "## 2.¿Con qué programas podemos abrir estos archivos?\n",
        "* **Nota**: probar abrir con el bloc de notas o editar de texto simple"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "82ba490d",
      "metadata": {
        "id": "82ba490d"
      },
      "source": [
        "Un archivo csv abierto con el bloc de notas se ve en la primer fila los atributos de la tabla de datos separados con comas, y a partir de la segunda fila se leen los datos que estarian en la tuplas correspondientes un archivo json no se puede abrir con block de notas pero si con visualstudio. Un pdf solo es posible abrirlo con un lector de pdf. Un xsl y un xslx solo se puede abrir con el programa de excel u otro parecido(como el open office). Un zip solo se puede abrir decomprimiendolo y el  shp se abre con shape y viewer, y xml se puede abrir con adobe acrobat, adobe in dising, tambien con excel. Y por ultimo el geojson se puede abrir con visualStudio\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "136c90e6",
      "metadata": {
        "id": "136c90e6"
      },
      "source": [
        " 3.¿Cuál es la diferencia de abrirlo con una aplicación o con python?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2ce39e9a",
      "metadata": {
        "id": "2ce39e9a"
      },
      "source": [
        "La diferencia es que con la aplicacion podes visualizar y modificar el archivo mientras que con python podes analizar sus datos"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "96a1c53c",
      "metadata": {
        "id": "96a1c53c"
      },
      "source": [
        "# 4.¿Cuáles son formatos abiertos y cuáles no ?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9e53a755",
      "metadata": {
        "id": "9e53a755"
      },
      "source": [
        "abiertos: csv, html, shp,\n",
        "cerrados: xls, xml, xslx, PDF, excel, Json, geoJson"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "44b5c704-a31d-4ce7-9737-8e10a279fbd3",
      "metadata": {
        "id": "44b5c704-a31d-4ce7-9737-8e10a279fbd3"
      },
      "source": [
        "## 5.Descargue uno de los siguientes archivos y responda las siguientes preguntas\n",
        "* [Aeropuertos Argentina](https://ourairports.com/countries/AR/airports.csv)\n",
        "* [Áreas protegidas](https://dnsg.ign.gob.ar/apps/api/v1/capas-sig/Geodesia+y+demarcaci%C3%B3n/L%C3%ADmites/area_protegida/csv)\n",
        "* [Conectivdad Argentina](https://datos.gob.ar/dataset/enacom-conectividad-al-servicio-internet/archivo/enacom_CONEC-AL-SERVI-DE-INTER_0)\n",
        "* [Lagos Argentinos](https://drive.google.com/file/d/1IrQhlI15z449f0qO82QVCkkjHvVoqBJ1/view?usp=sharing). Sitio de donde se descargó manualmente: https://www.ign.gob.ar/NuestrasActividades/Geografia/DatosArgentina/Lagos\n",
        "* [Concurrencia a Parque Nacionales](https://www.datos.gob.ar/dataset/turismo-parques-nacionales/archivo/turismo_a570af75-ed33-427c-9797-980fc0cd8fd1)\n",
        "* [Datos sobre consumo cultural](https://datos.cultura.gob.ar/dataset/encuesta-nacional-de-consumos-culturales)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "30c4171e-6213-4948-a7eb-a1e128a0bab6",
      "metadata": {
        "id": "30c4171e-6213-4948-a7eb-a1e128a0bab6"
      },
      "source": [
        "## 6.Abra el dataset con una  aplicación a elección\n",
        "* Contiene:\n",
        "    * 55 filas\n",
        "    * 5 columnas\n",
        "* Indique cuáles y cuántos valores únicos contiene la **columna especificada** según el dataset elegido.\n",
        "\n",
        "Contiene 6 valores unicos los cuales son Santa Cruz, Neuquen, Chubut, Buenos Aires, Rio Negro y Tierra del Fuego."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cc3f89e1-69f0-4ce0-b84f-8010b2c7b20a",
      "metadata": {
        "id": "cc3f89e1-69f0-4ce0-b84f-8010b2c7b20a"
      },
      "source": [
        "* Aeropuertos Argentina:type\n",
        "* Áreas protegidas: tap   \n",
        "* Conectivdad Argentina: elegir una de las tecnologías: ADSL \tCABLEMODEM \tDIALUP \tFIBRAOPTICA \tSATELITAL \tWIRELESS \tTELEFONIAFIJA\n",
        "* Lagos Argentinos: Ubicación\n",
        "* Concurrencia a Parque Nacionales:origen_visitantes\n",
        "* Datos sobre consumo cultural: p4\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "073a3988-6387-4084-a430-e665771a33c9",
      "metadata": {
        "id": "073a3988-6387-4084-a430-e665771a33c9"
      },
      "source": [
        "## Ahora trabajaremos con python y la librería pandas"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "963afbf1-4453-4d4b-a599-2b81637d388a",
      "metadata": {
        "id": "963afbf1-4453-4d4b-a599-2b81637d388a"
      },
      "source": [
        "Para trabajar con el archivo utilizaremos la librería pandas, primero la importamos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ee80e294-ed74-4e6b-a56e-1a9eed6d23da",
      "metadata": {
        "id": "ee80e294-ed74-4e6b-a56e-1a9eed6d23da"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bb1bcf06-e3a5-4f56-a2e1-a7834a1d3bd4",
      "metadata": {
        "id": "bb1bcf06-e3a5-4f56-a2e1-a7834a1d3bd4"
      },
      "source": [
        "Luego abrimos el archivo con la librería **pandas**\n",
        "* la función **read_csv**. Se pueden abrir otros tipos de archivos con otroas funciones.\n",
        "* la sentencia **columns** lista los nombres de las columnas\n",
        "```python\n",
        "nombre_variable = pd.read_csv('nombre_archivo.csv')\n",
        "nombre_variable.columns\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "39ea6873-4246-4e0b-97f1-d2f4aecec66b",
      "metadata": {
        "id": "39ea6873-4246-4e0b-97f1-d2f4aecec66b"
      },
      "source": [
        "## 7.Indique los nombres de las columnas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0b6f6a82-ab33-406b-9ff5-89a7a2ada066",
      "metadata": {
        "id": "0b6f6a82-ab33-406b-9ff5-89a7a2ada066",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ed8ff72b-665f-49dd-9a69-74911eafad32"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Nombre', 'Ubicación', 'Superficie (km²)', 'Profundidad máxima (m)',\n",
              "       'Profundidad media (m)', 'Coordenadas'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "import pandas as pd\n",
        "lagos_csv = pd.read_csv('lagos_arg.csv')\n",
        "lagos_csv.columns"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f1bc5222-fb0e-42ea-be01-8189eef414db",
      "metadata": {
        "id": "f1bc5222-fb0e-42ea-be01-8189eef414db"
      },
      "source": [
        "## 8.Indique el tipo de dato de la variable:\n",
        "```python\n",
        "type(nombre_variable)\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "44e45943-129e-4236-b142-fdf69d1e2ecf",
      "metadata": {
        "id": "44e45943-129e-4236-b142-fdf69d1e2ecf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "d029d223-b6b1-47e3-c554-37269585a02a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.frame.DataFrame</b><br/>def __init__(data=None, index: Axes | None=None, columns: Axes | None=None, dtype: Dtype | None=None, copy: bool | None=None) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py</a>Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n",
              "\n",
              "Data structure also contains labeled axes (rows and columns).\n",
              "Arithmetic operations align on both row and column labels. Can be\n",
              "thought of as a dict-like container for Series objects. The primary\n",
              "pandas data structure.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n",
              "    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n",
              "    data is a dict, column order follows insertion-order. If a dict contains Series\n",
              "    which have an index defined, it is aligned by its index. This alignment also\n",
              "    occurs if data is a Series or a DataFrame itself. Alignment is done on\n",
              "    Series/DataFrame inputs.\n",
              "\n",
              "    If data is a list of dicts, column order follows insertion-order.\n",
              "\n",
              "index : Index or array-like\n",
              "    Index to use for resulting frame. Will default to RangeIndex if\n",
              "    no indexing information part of input data and no index provided.\n",
              "columns : Index or array-like\n",
              "    Column labels to use for resulting frame when data does not have them,\n",
              "    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n",
              "    will perform column selection instead.\n",
              "dtype : dtype, default None\n",
              "    Data type to force. Only a single dtype is allowed. If None, infer.\n",
              "copy : bool or None, default None\n",
              "    Copy data from inputs.\n",
              "    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n",
              "    or 2d ndarray input, the default of None behaves like ``copy=False``.\n",
              "    If data is a dict containing one or more Series (possibly of different dtypes),\n",
              "    ``copy=False`` will ensure that these inputs are not copied.\n",
              "\n",
              "    .. versionchanged:: 1.3.0\n",
              "\n",
              "See Also\n",
              "--------\n",
              "DataFrame.from_records : Constructor from tuples, also record arrays.\n",
              "DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n",
              "read_csv : Read a comma-separated values (csv) file into DataFrame.\n",
              "read_table : Read general delimited file into DataFrame.\n",
              "read_clipboard : Read text from clipboard into DataFrame.\n",
              "\n",
              "Notes\n",
              "-----\n",
              "Please reference the :ref:`User Guide &lt;basics.dataframe&gt;` for more information.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "Constructing DataFrame from a dictionary.\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;col1&#x27;: [1, 2], &#x27;col2&#x27;: [3, 4]}\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=d)\n",
              "&gt;&gt;&gt; df\n",
              "   col1  col2\n",
              "0     1     3\n",
              "1     2     4\n",
              "\n",
              "Notice that the inferred dtype is int64.\n",
              "\n",
              "&gt;&gt;&gt; df.dtypes\n",
              "col1    int64\n",
              "col2    int64\n",
              "dtype: object\n",
              "\n",
              "To enforce a single dtype:\n",
              "\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=d, dtype=np.int8)\n",
              "&gt;&gt;&gt; df.dtypes\n",
              "col1    int8\n",
              "col2    int8\n",
              "dtype: object\n",
              "\n",
              "Constructing DataFrame from a dictionary including Series:\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;col1&#x27;: [0, 1, 2, 3], &#x27;col2&#x27;: pd.Series([2, 3], index=[2, 3])}\n",
              "&gt;&gt;&gt; pd.DataFrame(data=d, index=[0, 1, 2, 3])\n",
              "   col1  col2\n",
              "0     0   NaN\n",
              "1     1   NaN\n",
              "2     2   2.0\n",
              "3     3   3.0\n",
              "\n",
              "Constructing DataFrame from numpy ndarray:\n",
              "\n",
              "&gt;&gt;&gt; df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n",
              "...                    columns=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])\n",
              "&gt;&gt;&gt; df2\n",
              "   a  b  c\n",
              "0  1  2  3\n",
              "1  4  5  6\n",
              "2  7  8  9\n",
              "\n",
              "Constructing DataFrame from a numpy ndarray that has labeled columns:\n",
              "\n",
              "&gt;&gt;&gt; data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n",
              "...                 dtype=[(&quot;a&quot;, &quot;i4&quot;), (&quot;b&quot;, &quot;i4&quot;), (&quot;c&quot;, &quot;i4&quot;)])\n",
              "&gt;&gt;&gt; df3 = pd.DataFrame(data, columns=[&#x27;c&#x27;, &#x27;a&#x27;])\n",
              "...\n",
              "&gt;&gt;&gt; df3\n",
              "   c  a\n",
              "0  3  1\n",
              "1  6  4\n",
              "2  9  7\n",
              "\n",
              "Constructing DataFrame from dataclass:\n",
              "\n",
              "&gt;&gt;&gt; from dataclasses import make_dataclass\n",
              "&gt;&gt;&gt; Point = make_dataclass(&quot;Point&quot;, [(&quot;x&quot;, int), (&quot;y&quot;, int)])\n",
              "&gt;&gt;&gt; pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n",
              "   x  y\n",
              "0  0  0\n",
              "1  0  3\n",
              "2  2  3\n",
              "\n",
              "Constructing DataFrame from Series/DataFrame:\n",
              "\n",
              "&gt;&gt;&gt; ser = pd.Series([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=ser, index=[&quot;a&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df\n",
              "   0\n",
              "a  1\n",
              "c  3\n",
              "\n",
              "&gt;&gt;&gt; df1 = pd.DataFrame([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], columns=[&quot;x&quot;])\n",
              "&gt;&gt;&gt; df2 = pd.DataFrame(data=df1, index=[&quot;a&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df2\n",
              "   x\n",
              "a  1\n",
              "c  3</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 490);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "type(lagos_csv)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "43296795-b605-4af8-8fdb-3e1245465321",
      "metadata": {
        "id": "43296795-b605-4af8-8fdb-3e1245465321"
      },
      "source": [
        "## 9. Ahora con python vamos a buscar la misma información que encontramos con la aplicación\n",
        "* Indique la cantidad de:\n",
        "    * filas\n",
        "    * columnas\n",
        "* Indique cuáles y cuántos valores únicos contiene la **columna especificada** según el dataset elegido."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2bedaf05-aa05-40d5-9dac-ea5dbea5b8c0",
      "metadata": {
        "id": "2bedaf05-aa05-40d5-9dac-ea5dbea5b8c0"
      },
      "source": [
        "*  Aeropuertos Argentina:type\n",
        "* Áreas protegidas: tap   \n",
        "* Concurrencia a Parque Nacionales:origen_visitantes\n",
        "* Datos sobre consumo cultural: p4\n",
        "* Lagos Argentinos: Ubicación\n",
        "* Conectivdad Argentina: elegir una de las tecnologías: ADSL \tCABLEMODEM \tDIALUP \tFIBRAOPTICA \tSATELITAL \tWIRELESS \tTELEFONIAFIJA\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "985e2b9d-048f-4298-9a0c-47a07130ace7",
      "metadata": {
        "id": "985e2b9d-048f-4298-9a0c-47a07130ace7"
      },
      "source": [
        "Utilizamos **shape** para saber la cantidad de filas  y columnas:\n",
        "```python\n",
        "nombre_dataframe.shape\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b133e348-7c37-44ac-bf8d-baf26480959b",
      "metadata": {
        "id": "b133e348-7c37-44ac-bf8d-baf26480959b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fa8582b6-f2e7-4d25-ddd8-f584afb7707a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(52, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "lagos_csv.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ff176681-465f-4d37-b11b-eee7ad8191ed",
      "metadata": {
        "id": "ff176681-465f-4d37-b11b-eee7ad8191ed"
      },
      "source": [
        "Utilizamos el método unique para saber los valores únicos de una columna:\n",
        "```python\n",
        "nombre_dataframe.nombre_columna.unique()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dad7140b-af1c-433c-821f-fa9714a1d736",
      "metadata": {
        "id": "dad7140b-af1c-433c-821f-fa9714a1d736",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6b68b516-176f-473b-f7d4-37c30ca9e800"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Santa Cruz', 'Río Negro / Neuquén', 'Chubut', 'Buenos Aires',\n",
              "       'Río Negro', 'Neuquén',\n",
              "       'Tierra del Fuego,\\n Antártida e Islas del Atlántico Sur',\n",
              "       'Tierra del Fuego, Antártida e Islas del Atlántico Sur\\n',\n",
              "       'Tierra del Fuego,  Antártida e Islas del Atlántico Sur'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "lagos_csv.Ubicación.unique()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "dc05d3da-1f1b-4ab3-b2fa-3463d0f10d66",
      "metadata": {
        "id": "dc05d3da-1f1b-4ab3-b2fa-3463d0f10d66"
      },
      "source": [
        "## 10. Indique si las columnas contienen valores nulos"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4a985ee7-9d91-496d-b696-0274818ea568",
      "metadata": {
        "id": "4a985ee7-9d91-496d-b696-0274818ea568"
      },
      "source": [
        "La sentencia **isnull().sum()** suma la cantidad de valores nulos de cada columna del dataframe\n",
        "```\n",
        "nombre_dataframe.isnull().sum()\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lagos_csv.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EHQ_HiqalVH_",
        "outputId": "9dbd0e85-62e4-4c00-ac07-4750c021c315"
      },
      "id": "EHQ_HiqalVH_",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Nombre                     0\n",
              "Ubicación                  0\n",
              "Superficie (km²)           0\n",
              "Profundidad máxima (m)    37\n",
              "Profundidad media (m)     30\n",
              "Coordenadas                0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e6377436-b606-4147-870f-4e0428ac38fd",
      "metadata": {
        "id": "e6377436-b606-4147-870f-4e0428ac38fd"
      },
      "source": [
        "# Ejemplo con archivo de copa américa"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "file_data = pd.read_csv('copa_america_historico.csv')"
      ],
      "metadata": {
        "id": "hNszUucFGnHw"
      },
      "id": "hNszUucFGnHw",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "Qbjsxk4Hdw3o",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "Qbjsxk4Hdw3o",
        "outputId": "be1f3ccb-691b-4bcb-a7c7-e8bdee5aaef8"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.frame.DataFrame</b><br/>def __init__(data=None, index: Axes | None=None, columns: Axes | None=None, dtype: Dtype | None=None, copy: bool | None=None) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py</a>Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n",
              "\n",
              "Data structure also contains labeled axes (rows and columns).\n",
              "Arithmetic operations align on both row and column labels. Can be\n",
              "thought of as a dict-like container for Series objects. The primary\n",
              "pandas data structure.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n",
              "    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n",
              "    data is a dict, column order follows insertion-order. If a dict contains Series\n",
              "    which have an index defined, it is aligned by its index. This alignment also\n",
              "    occurs if data is a Series or a DataFrame itself. Alignment is done on\n",
              "    Series/DataFrame inputs.\n",
              "\n",
              "    If data is a list of dicts, column order follows insertion-order.\n",
              "\n",
              "index : Index or array-like\n",
              "    Index to use for resulting frame. Will default to RangeIndex if\n",
              "    no indexing information part of input data and no index provided.\n",
              "columns : Index or array-like\n",
              "    Column labels to use for resulting frame when data does not have them,\n",
              "    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n",
              "    will perform column selection instead.\n",
              "dtype : dtype, default None\n",
              "    Data type to force. Only a single dtype is allowed. If None, infer.\n",
              "copy : bool or None, default None\n",
              "    Copy data from inputs.\n",
              "    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n",
              "    or 2d ndarray input, the default of None behaves like ``copy=False``.\n",
              "    If data is a dict containing one or more Series (possibly of different dtypes),\n",
              "    ``copy=False`` will ensure that these inputs are not copied.\n",
              "\n",
              "    .. versionchanged:: 1.3.0\n",
              "\n",
              "See Also\n",
              "--------\n",
              "DataFrame.from_records : Constructor from tuples, also record arrays.\n",
              "DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n",
              "read_csv : Read a comma-separated values (csv) file into DataFrame.\n",
              "read_table : Read general delimited file into DataFrame.\n",
              "read_clipboard : Read text from clipboard into DataFrame.\n",
              "\n",
              "Notes\n",
              "-----\n",
              "Please reference the :ref:`User Guide &lt;basics.dataframe&gt;` for more information.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "Constructing DataFrame from a dictionary.\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;col1&#x27;: [1, 2], &#x27;col2&#x27;: [3, 4]}\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=d)\n",
              "&gt;&gt;&gt; df\n",
              "   col1  col2\n",
              "0     1     3\n",
              "1     2     4\n",
              "\n",
              "Notice that the inferred dtype is int64.\n",
              "\n",
              "&gt;&gt;&gt; df.dtypes\n",
              "col1    int64\n",
              "col2    int64\n",
              "dtype: object\n",
              "\n",
              "To enforce a single dtype:\n",
              "\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=d, dtype=np.int8)\n",
              "&gt;&gt;&gt; df.dtypes\n",
              "col1    int8\n",
              "col2    int8\n",
              "dtype: object\n",
              "\n",
              "Constructing DataFrame from a dictionary including Series:\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;col1&#x27;: [0, 1, 2, 3], &#x27;col2&#x27;: pd.Series([2, 3], index=[2, 3])}\n",
              "&gt;&gt;&gt; pd.DataFrame(data=d, index=[0, 1, 2, 3])\n",
              "   col1  col2\n",
              "0     0   NaN\n",
              "1     1   NaN\n",
              "2     2   2.0\n",
              "3     3   3.0\n",
              "\n",
              "Constructing DataFrame from numpy ndarray:\n",
              "\n",
              "&gt;&gt;&gt; df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n",
              "...                    columns=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])\n",
              "&gt;&gt;&gt; df2\n",
              "   a  b  c\n",
              "0  1  2  3\n",
              "1  4  5  6\n",
              "2  7  8  9\n",
              "\n",
              "Constructing DataFrame from a numpy ndarray that has labeled columns:\n",
              "\n",
              "&gt;&gt;&gt; data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n",
              "...                 dtype=[(&quot;a&quot;, &quot;i4&quot;), (&quot;b&quot;, &quot;i4&quot;), (&quot;c&quot;, &quot;i4&quot;)])\n",
              "&gt;&gt;&gt; df3 = pd.DataFrame(data, columns=[&#x27;c&#x27;, &#x27;a&#x27;])\n",
              "...\n",
              "&gt;&gt;&gt; df3\n",
              "   c  a\n",
              "0  3  1\n",
              "1  6  4\n",
              "2  9  7\n",
              "\n",
              "Constructing DataFrame from dataclass:\n",
              "\n",
              "&gt;&gt;&gt; from dataclasses import make_dataclass\n",
              "&gt;&gt;&gt; Point = make_dataclass(&quot;Point&quot;, [(&quot;x&quot;, int), (&quot;y&quot;, int)])\n",
              "&gt;&gt;&gt; pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n",
              "   x  y\n",
              "0  0  0\n",
              "1  0  3\n",
              "2  2  3\n",
              "\n",
              "Constructing DataFrame from Series/DataFrame:\n",
              "\n",
              "&gt;&gt;&gt; ser = pd.Series([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=ser, index=[&quot;a&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df\n",
              "   0\n",
              "a  1\n",
              "c  3\n",
              "\n",
              "&gt;&gt;&gt; df1 = pd.DataFrame([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], columns=[&quot;x&quot;])\n",
              "&gt;&gt;&gt; df2 = pd.DataFrame(data=df1, index=[&quot;a&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df2\n",
              "   x\n",
              "a  1\n",
              "c  3</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 490);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ],
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "type(file_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4e4c9217-4ac2-4cba-84c3-4e17c6d00c75",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4e4c9217-4ac2-4cba-84c3-4e17c6d00c75",
        "outputId": "d42f2abf-d59f-4ac3-b4eb-827e12451da8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['Anio', 'Sede', 'Campeon', 'Final Resultado', 'Subcampeon', 'Tercero',\n",
              "       'Resultado', 'Cuarto'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "file_data.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9fffd550-ba5a-43d5-9d6b-fe079e705abd",
      "metadata": {
        "id": "9fffd550-ba5a-43d5-9d6b-fe079e705abd",
        "outputId": "0ed67835-16c4-41e1-8689-0dfb385acd3a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "type(file_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bfe4ead8-6657-4187-a661-1baeefee0b04",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bfe4ead8-6657-4187-a661-1baeefee0b04",
        "outputId": "af483512-5410-4c0a-d1ed-267d224e1966"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['Lig.', '1:0', '3:0', '2:0', '7:0', '3:2', '0:1 2:0 1:0',\n",
              "       '3:0 0:1 0:0', '2:0 1:1', '2:1', '1:1', '3:1', '2:2', '0:0'],\n",
              "      dtype=object)"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "file_data['Final Resultado'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "pnTePaW9fcWS",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pnTePaW9fcWS",
        "outputId": "aa32ad9a-fe07-4525-9e0b-7a83d6f05ffc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['Uruguay', 'Brasil', 'Argentina', 'Perú', 'Paraguay', 'Bolivia',\n",
              "       'Colombia', 'Chile'], dtype=object)"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "file_data.Campeon.unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "17KFpJ4cfV9j",
      "metadata": {
        "id": "17KFpJ4cfV9j"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "70896bb7-6364-46cc-a1f3-bb0d16392aac",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "70896bb7-6364-46cc-a1f3-bb0d16392aac",
        "outputId": "d29f48df-1038-4ab2-f894-d5fa846ab7c9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Anio               0\n",
              "Sede               0\n",
              "Campeon            0\n",
              "Final Resultado    0\n",
              "Subcampeon         0\n",
              "Tercero            0\n",
              "Resultado          3\n",
              "Cuarto             4\n",
              "dtype: int64"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "file_data.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "efcb2f9a-f2cc-40dd-b0d0-a29ff36d4d5f",
      "metadata": {
        "id": "efcb2f9a-f2cc-40dd-b0d0-a29ff36d4d5f"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "ZYXN8cScq8g5",
      "metadata": {
        "id": "ZYXN8cScq8g5"
      },
      "source": [
        "# Parte 2"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "AB52fbZZoYEX",
      "metadata": {
        "id": "AB52fbZZoYEX"
      },
      "source": [
        "# Completar hasta acá de la actividad 4 hasta el viernes 3/5"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ad28f4fa-aa40-4ef3-a208-56dc7ae05e92",
      "metadata": {
        "id": "ad28f4fa-aa40-4ef3-a208-56dc7ae05e92"
      },
      "source": [
        "## Gráficamos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d966f909-2b70-4019-bcc5-22641455b657",
      "metadata": {
        "id": "d966f909-2b70-4019-bcc5-22641455b657",
        "outputId": "591915d4-45cc-4a79-82bf-c8fd35339fe9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Santa Cruz', 'Río Negro / Neuquén', 'Chubut', 'Buenos Aires',\n",
              "       'Río Negro', 'Neuquén',\n",
              "       'Tierra del Fuego,\\n Antártida e Islas del Atlántico Sur',\n",
              "       'Tierra del Fuego, Antártida e Islas del Atlántico Sur\\n',\n",
              "       'Tierra del Fuego,  Antártida e Islas del Atlántico Sur'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "lagos_csv.Ubicación.unique()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8c9106ba-ec11-44e3-b61c-d2e0ebd13aa2",
      "metadata": {
        "id": "8c9106ba-ec11-44e3-b61c-d2e0ebd13aa2"
      },
      "source": [
        "Hacer un gráfico con la columnas de valores únicos en barra y convertir a torta"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Crear el gráfico de barras\n",
        "conteo_ubicaciones = lagos_csv['Ubicación'].value_counts()\n",
        "conteo_ubicaciones.plot(kind='bar', color='skyblue')\n",
        "\n",
        "# Agregar etiquetas y título\n",
        "plt.xlabel('Provincias')\n",
        "plt.ylabel('Cantidad de lagos')\n",
        "plt.title('Cantidad de Lagos por Provincia')\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "qx--C-_Dn2A-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 637
        },
        "outputId": "5e58afed-4376-4735-c065-3c7dd66fbe01"
      },
      "id": "qx--C-_Dn2A-",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d7e03568-671b-4a94-89a3-6b86f959226a",
      "metadata": {
        "id": "d7e03568-671b-4a94-89a3-6b86f959226a"
      },
      "source": [
        "## 11.Crear el gráfico de torta\n",
        "* Investigar en la página de matplotlib(https://matplotlib.org/) cuál es el parámetro que cambia para hacer un gráfico de torta\n",
        "* ¿Qué otros tipos de gráficos se pueden realizar?"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Respuesta: El principal parámetro que cambia es que además de plot vamos a tener subplots, que son las \"porciones\" del gráfico de torta. También el hecho de tener que definir el tamaño de sus porciones y sus colores.\n",
        "También se pueden realizar diagramas de pila, escaleras, diagrama de caja, y también curriculares regulares o irregulares."
      ],
      "metadata": {
        "id": "v4UeLcf-pW6j"
      },
      "id": "v4UeLcf-pW6j"
    },
    {
      "cell_type": "code",
      "source": [
        "#guardado\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x = lagos_csv['Ubicación'].value_counts()\n",
        "\n",
        "#configuramos el gráfico de torta, sua colores, los nombres de las \"porciones\" y sus tamaños.\n",
        "colors = plt.get_cmap('Blues')(np.linspace(0.7, 0.2, len(x)))\n",
        "labels = lagos_csv['Ubicación'].unique()\n",
        "sizes = x\n",
        "\n",
        "#juntamos todos los datos anteriores y mostramos el gráfico\n",
        "fig, ax = plt.subplots()\n",
        "ax.pie(sizes, labels=labels, colors=colors, labeldistance=1.9, autopct='%0.0f%%')\n",
        "\n",
        "plt.title('Cantidad de Lagos por Provincia', pad=40)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "id": "w_I9IYQW2L8a",
        "outputId": "bc8e709f-02c5-4bee-bbd1-3a28cdc32202"
      },
      "id": "w_I9IYQW2L8a",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "53261dc0-fff2-4d64-9d8e-811d93c2e875",
      "metadata": {
        "id": "53261dc0-fff2-4d64-9d8e-811d93c2e875"
      },
      "source": [
        "## Desafío:\n",
        "* Probar realizar gráficos con otras columnas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a91662a5-9030-49d6-a49c-6b31615ad94c",
      "metadata": {
        "id": "a91662a5-9030-49d6-a49c-6b31615ad94c",
        "outputId": "f6a853b6-9b71-47b1-feef-e84cee39f5dc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x200 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAbAAAADvCAYAAACT4YG8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABq9klEQVR4nO2dd1RUx9vHv9s7IEiTXqQqiDWKYg+xRU2ssWDX18Sg0ajp1hANYkuMxiSCxmhiTWLXKBaMXYgFEFHEJCiK9LZt3j/4seFKW2CX3YX5nLPncOfOnXnusHufOzNPYRFCCCgUCoVCMTHYhhaAQqFQKJT6QBUYhUKhUEwSqsAoFAqFYpJQBUahUCgUk4QqMAqFQqGYJFSBUSgUCsUkoQqMQqFQKCYJVWAUCoVCMUmoAqNQKBSKSUIVmAnh6uqKSZMmGVoMCqVRefr0KUaMGAErKyuwWCysW7cOsbGxYLFYiI2NrVNbS5YsAYvF0o+glEbHpBVYdHQ0WCwWrl27ZlA5Vq5ciddffx22trZgsVhYsmRJtXX/+ecfjBo1ChYWFjAzM8PQoUPx4MGDxhOWQjEx5s2bh+PHj+ODDz7Ajh078NprrxlaJIqRwDW0AE2Bjz/+GHZ2dggKCsLx48errVdQUIDevXsjNzcXH374IXg8HtauXYuePXsiPj4eVlZWjSg1hWIanD59GkOHDsWCBQs0ZV5eXiguLgafz69TWx9//DEWL16saxEpBoIqMB3w8OFDuLq64vnz57C2tq623qZNm5CSkoIrV66gU6dOAIABAwagTZs2WLNmDT7//PPGEpnSxCgpKQGfzwebbdKLKhqUSiXUajX4fD4yMzNhYWHBOM9msyEUCuvcLpfLBZdLH3tNhabxba+FmzdvYsCAATAzM4NUKkXfvn1x6dIlRh2FQoGlS5eidevWEAqFsLKyQvfu3XHy5Mla23d1ddVKjr1796JTp04a5QUAPj4+6Nu3L3755Zc63RMAvHjxAgsWLEDbtm0hlUphZmaGAQMGICEhoVLdR48e4fXXX4dEIoGNjY1mWaaqfYQ9e/agQ4cOEIlEaNmyJcaPH49//vmHUefJkyeYPHkyHB0dIRAIYG9vj6FDhyItLa1WuZOSkjBq1ChYW1tDJBLB29sbH330EaOONv+z8iXkuLg4vPfee7C2toZEIsHw4cPx7NmzWuWYNGkSpFIp0tPTMXjwYEilUjg4OODrr78GANy6dQt9+vSBRCKBi4sLfvrpJ8b12ox/QUEBJBIJwsPDK/X/999/g8PhICIiQlP24MEDjBw5EpaWlhCLxXjllVdw+PBhxnXl+z+7d+/Gxx9/DAcHB4jFYuTl5VV7r7t370aHDh0gk8lgZmaGtm3bYv369Zrz1e0NlY9xxf+rq6srBg8ejBMnTqBdu3YQCoXw8/PD/v37K12fk5ODuXPnwsnJCQKBAJ6enli1ahXUarWmTlpaGlgsFiIjI7Fu3Tp4eHhAIBBg06ZNYLFYIITg66+/BovF0shY3R7Y5cuXMXDgQLRo0QISiQQBAQFa3eePP/6o+c5bWlpizJgxePz4cbXjSTEOmvyryJ07d9CjRw+YmZlh4cKF4PF42LJlC3r16oWzZ8+iS5cuAMq+2BEREZg2bRo6d+6MvLw8XLt2DTdu3ED//v0bLIdarcZff/2FKVOmVDrXuXNnnDhxAvn5+ZDJZFq3+eDBAxw8eBAjR46Em5sbnj59ii1btqBnz564e/cuWrVqBQAoLCxEnz59kJGRgfDwcNjZ2eGnn37CmTNnKrUZHR2NyZMno1OnToiIiMDTp0+xfv16xMXF4ebNm5o34TfffBN37tzBnDlz4OrqiszMTJw8eRLp6ek1KvS//voLPXr0AI/Hw4wZM+Dq6orU1FT8/vvvWLlyJQDt/2flzJkzBy1atMBnn32GtLQ0rFu3Du+88w5+/vnnWsdQpVJhwIABCAkJwerVq7Fz50688847kEgk+OijjzBu3Di88cYb2Lx5MyZOnIiuXbvCzc1N6/GXSqUYPnw4fv75Z0RFRYHD4Wj63rVrFwghGDduHIAyY4Vu3bqhqKgI7777LqysrBATE4PXX38de/fuxfDhwxmyL1++HHw+HwsWLEBpaWm1y2knT57E2LFj0bdvX6xatQoAkJiYiLi4uCoVqzakpKRg9OjRmDVrFsLCwrBt2zaMHDkSx44d0/xeioqK0LNnT/zzzz+YOXMmnJ2dcfHiRXzwwQfIyMjAunXrGG1u27YNJSUlmDFjBgQCAdq3b48dO3ZgwoQJ6N+/PyZOnFijTCdPnsTgwYNhb2+v+Z4nJibi0KFDNd7nypUr8cknn2DUqFGYNm0anj17ho0bNyIkJITxnacYIcSE2bZtGwFArl69Wm2dYcOGET6fT1JTUzVl//77L5HJZCQkJERTFhgYSAYNGtQgeZ49e0YAkM8++6zac8uWLat07uuvvyYASFJSUo3tu7i4kLCwMM1xSUkJUalUjDoPHz4kAoGA0c+aNWsIAHLw4EFNWXFxMfHx8SEAyJkzZwghhMjlcmJjY0PatGlDiouLNXUPHTpEAJBPP/2UEEJIdnY2AUC+/PLLGuWtipCQECKTycijR48Y5Wq1WvO3tv+z8v9/v379GNfPmzePcDgckpOTU6MsYWFhBAD5/PPPNWXZ2dlEJBIRFotFdu/erSlPSkqq9L/VdvyPHz9OAJCjR48y6gYEBJCePXtqjufOnUsAkPPnz2vK8vPziZubG3F1ddX0debMGQKAuLu7k6KiohrvkRBCwsPDiZmZGVEqldXW+eyzz0hVj4PyMX748KGmzMXFhQAg+/bt05Tl5uYSe3t7EhQUpClbvnw5kUgk5N69e4w2Fy9eTDgcDklPTyeElI0ZAGJmZkYyMzMryQCAvP3224yy8jEo/+4qlUri5uZGXFxcSHZ2NqNuxe/Gy/eZlpZGOBwOWblyJeOaW7duES6XW6mcYlw06SVElUqFEydOYNiwYXB3d9eU29vb46233sKFCxc0yy4WFha4c+cOUlJS9CJLcXExAEAgEFQ6V76WX15HWwQCgWbPQ6VSISsrC1KpFN7e3rhx44am3rFjx+Dg4IDXX3+d0ef06dMZ7V27dg2ZmZmYPXs2Y39h0KBB8PHx0SxliUQi8Pl8xMbGIjs7W2t5nz17hnPnzmHKlClwdnZmnCtf1qnL/6ycGTNmMJaFevToAZVKhUePHmkl17Rp0zR/W1hYwNvbGxKJBKNGjdKUe3t7w8LCgmExqu349+vXD61atcLOnTs1Zbdv38Zff/2F8ePHa8qOHDmCzp07o3v37poyqVSKGTNmIC0tDXfv3mXIHRYWBpFIVOv9WVhYoLCwUKvlcG1p1aoVY0ZoZmaGiRMn4ubNm3jy5AmAsqXoHj16oEWLFnj+/Lnm069fP6hUKpw7d47R5ptvvlnjHnJN3Lx5Ew8fPsTcuXMrzZhqMpvfv38/1Go1Ro0axZDRzs4OrVu3rnKVgmI8NGkF9uzZMxQVFcHb27vSOV9fX6jVas0697Jly5CTkwMvLy+0bdsW77//Pv766y+dyVL+oCktLa10rqSkhFFHW9RqNdauXYvWrVtDIBCgZcuWsLa2xl9//YXc3FxNvUePHsHDw6PSD9nT05NxXP7Ar2q8fHx8NOcFAgFWrVqFo0ePwtbWVrP8Vv7gqo7yh3+bNm2qrVOX/1k5LyvDFi1aAIBWylUoFFZ6aJqbm8PR0bHSeJmbmzPa1Hb82Ww2xo0bh4MHD6KoqAgAsHPnTgiFQowcOVJT79GjR9Xed/n5ipQvZdbG7Nmz4eXlhQEDBsDR0RFTpkzBsWPHtLq2Ojw9PSuNj5eXFwBo9stSUlJw7NgxWFtbMz79+vUDAGRmZtbrfqoiNTUVQM3frapISUkBIQStW7euJGdiYmIlGSnGRZPfA9OWkJAQpKam4tdff8WJEyfw3XffYe3atdi8eTPjDb2+WFpaQiAQICMjo9K58rLyPStt+fzzz/HJJ59gypQpWL58OSwtLcFmszF37lzGJrk+mDt3LoYMGYKDBw/i+PHj+OSTTxAREYHTp08jKChIr32/TMV9pYoQQup9rTZt1mX8J06ciC+//BIHDx7E2LFj8dNPP2Hw4MEwNzevVcbq0PaFx8bGBvHx8Th+/DiOHj2Ko0ePYtu2bZg4cSJiYmIAVD9LUalU9ZZPrVajf//+WLhwYZXnyxVeOXV9gdMFarUaLBYLR48erfJ/LpVKG10mivY0aQVmbW0NsViM5OTkSueSkpLAZrPh5OSkKbO0tMTkyZMxefJkFBQUICQkBEuWLNGJAmOz2Wjbtm2VTteXL1+Gu7t7nQw4gDKrxt69e+P7779nlOfk5KBly5aaYxcXF9y9exeEEMaD6v79+4zrXFxcAADJycno06cP41xycrLmfDkeHh6YP38+5s+fj5SUFLRr1w5r1qzBjz/+WKW85UuCt2/frvae6vo/MyTajj9QNjMICgrCzp074ejoiPT0dGzcuJFRx8XFpdr7Lj9fX/h8PoYMGYIhQ4ZArVZj9uzZ2LJlCz755BN4enpqZq05OTmMJbjqlmHv379f6ft07949AP9Z5Xp4eKCgoEAz49InHh4eAMq+W3Xpz8PDA4QQuLm5VVKoFOOnSS8hcjgcvPrqq/j1118ZZsBPnz7FTz/9hO7du8PMzAwAkJWVxbhWKpXC09OzyiW/+jJixAhcvXqVocSSk5Nx+vRpxlKStnA4nEqzjD179lQyeQ8NDcU///yD3377TVNWUlKCrVu3Mup17NgRNjY22Lx5M+O+jx49isTERAwaNAhAmXVZ+bJnOR4eHpDJZDWOl7W1NUJCQvDDDz8gPT2dca78PuryPzM02o5/ORMmTMCJEyewbt06WFlZYcCAAYzzAwcOxJUrV/Dnn39qygoLC/Htt9/C1dUVfn5+9ZLz5e82m81GQEAAgP+WtMsVQMV9qcLCQs0M7WX+/fdfHDhwQHOcl5eH7du3o127drCzswMAjBo1Cn/++WeVzv05OTlQKpX1up+qaN++Pdzc3LBu3Trk5OQwztU0E3/jjTfA4XCwdOnSSvUIIZXGjmJcNIkZ2A8//FDlmn54eDhWrFiBkydPonv37pg9eza4XC62bNmC0tJSrF69WlPXz88PvXr1QocOHWBpaYlr165h7969eOedd2rtf8eOHXj06JFmf+PcuXNYsWIFgLKHVvmb8+zZs7F161YMGjQICxYsAI/HQ1RUFGxtbTF//vw63/fgwYOxbNkyTJ48Gd26dcOtW7ewc+dOhvEDAMycORNfffUVxo4di/DwcNjb22v2YID/lo94PB5WrVqFyZMno2fPnhg7dqzGjN7V1RXz5s0DUPam3bdvX4waNQp+fn7gcrk4cOAAnj59ijFjxtQo84YNG9C9e3e0b98eM2bMgJubG9LS0nD48GHEx8cDgNb/M0Oj7fiX89Zbb2HhwoU4cOAA/u///g88Ho9xfvHixdi1axcGDBiAd999F5aWloiJicHDhw+xb9++ejspT5s2DS9evECfPn3g6OiIR48eYePGjWjXrp1mf+3VV1+Fs7Mzpk6divfffx8cDgc//PADrK2tK71sAGXLf1OnTsXVq1dha2uLH374AU+fPsW2bds0dd5//3389ttvGDx4MCZNmoQOHTqgsLAQt27dwt69e5GWllZpplpf2Gw2vvnmGwwZMgTt2rXD5MmTYW9vj6SkJNy5c6faCDkeHh5YsWIFPvjgA6SlpWHYsGGQyWR4+PAhDhw4gBkzZjAigFCMDMMYP+qGchPf6j6PHz8mhBBy48YNEhoaSqRSKRGLxaR3797k4sWLjLZWrFhBOnfuTCwsLIhIJCI+Pj5k5cqVRC6X1ypHz549q5Wh3My3nMePH5MRI0YQMzMzIpVKyeDBg0lKSopW91uVGf38+fOJvb09EYlEJDg4mPz555+kZ8+eDPNsQgh58OABGTRoEBGJRMTa2prMnz+f7Nu3jwAgly5dYtT9+eefSVBQEBEIBMTS0pKMGzeO/P3335rzz58/J2+//Tbx8fEhEomEmJubky5dupBffvlFq/u4ffs2GT58OLGwsCBCoZB4e3uTTz75hFFHm/9ZdW4UL5tYV0dYWBiRSCSVynv27En8/f0rlbu4uDBcLeoy/uUMHDiQAKh0L+WkpqaSESNGaMamc+fO5NChQ1Xe3549e2q8v3L27t1LXn31VWJjY0P4fD5xdnYmM2fOJBkZGYx6169fJ126dNHUiYqKqtaMftCgQeT48eMkICCACAQC4uPjU6U8+fn55IMPPiCenp6Ez+eTli1bkm7dupHIyEjNb6vcjL46twxoYUZfzoULF0j//v2JTCYjEomEBAQEkI0bN2rOV+cusG/fPtK9e3cikUiIRCIhPj4+5O233ybJyck1ji3FsLAI0WKnm9IkWbduHebNm4e///4bDg4OhhanWTB8+HDcunWr0v6jKeHq6oo2bdrg0KFDhhaF0sxp0ntglP942cespKQEW7ZsQevWranyaiQyMjJw+PBhTJgwwdCiUChNgiaxB0apnTfeeAPOzs5o164dcnNz8eOPPyIpKYnhXEvRDw8fPkRcXBy+++478Hg8zJw509AiUShNAqrAmgmhoaH47rvvsHPnTqhUKvj5+WH37t0YPXq0oUVr8pw9exaTJ0+Gs7MzYmJiNFZ6FAqlYdA9MAqFQqGYJHQPjEKhUCgmCVVgFAqFQjFJqAKjUCgUiklCFRiFQqFQTBKqwCgUCoViklAFpgcmTZqEYcOGNZl+dEmvXr0wd+5cQ4tBoVCaAI2uwIz1obtkyRKwWCzMmjWLUR4fHw8Wi8WIjG4qxMbGgsViVYrODZSFA1q3bl2jy7R//34sX7680fulUChNDzoDq4BQKMT333+PlJQUQ4vSZLG0tKxz3jMKhUKpCqNTYFFRUWjbti0kEgmcnJwwe/ZsFBQUMOps3boVTk5OEIvFGD58OKKiohhJ+ADgm2++gYeHB/h8Pry9vbFjx45a+/b29kbv3r3x0UcfVVtHpVJh6tSpcHNzg0gkgre3N9avX19l3cjISNjb28PKygpvv/02FAqF5hyLxcLBgwcZ9S0sLBAdHa05fvz4MUaNGgULCwtYWlpi6NChepkJpqWlgcViadKZAGX5mlgsFmJjYwFod9/ls+ulS5fC2toaZmZmmDVrFuRyuaYOXUKkUCi6wugUGJvNxoYNG3Dnzh3ExMTg9OnTjJTkcXFxmDVrFsLDwxEfH4/+/ftj5cqVjDYOHDiA8PBwzJ8/H7dv38bMmTMxefJknDlzptb+v/jiC+zbt6/KzMlAWQpyR0dH7NmzB3fv3sWnn36KDz/8EL/88guj3pkzZ5CamoozZ84gJiYG0dHRDOVUGwqFAqGhoZDJZDh//jzi4uIglUrx2muvMRRCY6Htff/xxx9ITExEbGwsdu3ahf3792Pp0qWNLi/FMERHR1d6mawPVb3gUSiVaOz8LWFhYWTo0KFa19+zZw+xsrLSHI8ePZqRk4kQQsaNG0fMzc01x926dSPTp09n1Bk5ciQZOHBgtf189tlnJDAwkBBCyJgxY0ifPn0IIYTcvHmzUj6kl3n77bfJm2++qTkOCwsjLi4uRKlUMvofPXq05hgAOXDgAKMdc3Nzsm3bNkIIITt27CDe3t5ErVZrzpeWlhKRSESOHz+u6aemsSzPmVSe46jih8VikbVr1xJC/svHdPPmTc212dnZtebUquq+LS0tSWFhoabsm2++IVKplKhUKkJIWa6t8PDwatuk1P030hi88847xMfHp8pzjx49Imw2m/z666+kqKiIPH36tMH9VfX7oFBexuhmYKdOnULfvn3h4OAAmUyGCRMmICsrS5PtODk5GZ07d2Zc8/JxYmIigoODGWXBwcFITEzUSoYVK1bg/PnzOHHiRJXnv/76a3To0AHW1taQSqX49ttvK2Wt9ff3B4fD0Rzb29sjMzNTq/4BICEhAffv34dMJoNUKoVUKoWlpSVKSkqQmpqqdTsAcP78ecTHxzM+rVq1qlMbgHb3HRgYCLFYrDnu2rUrCgoK8Pjx4zr3RzEepk6diqSkJFy8eLHSuejoaNjY2GDgwIEQiUSwsbExgISU5ohRKbC0tDQMHjwYAQEB2LdvH65fv46vv/4aABp12czDwwPTp0/H4sWLQV6Kdbx7924sWLAAU6dOxYkTJxAfH4/JkydXku/ldPEsFgtqtZpx/HLbFffICgoK0KFDh0qK5969e3jrrbfqdD9ubm7w9PRkfLjc/xIRlKeqryhPRVnqct8U/WOIfeJ27dqhffv2+OGHHxjlhBBER0cjLCwMXC63yiXEX3/9Fe3bt4dQKIS7uzuWLl0KpVKpOZ+SkoKQkBAIhUL4+fnh5MmTjOvL92h/+eUX9OjRAyKRCJ06dcK9e/dw9epVdOzYEVKpFAMGDMCzZ8801129ehX9+/dHy5YtYW5ujp49e+LGjRvaDDHFRDAqBXb9+nWo1WqsWbMGr7zyCry8vPDvv/8y6nh7e+Pq1auMspePfX19ERcXxyiLi4uDn5+f1rJ8+umnuHfvHnbv3l2pnW7dumH27NkICgqCp6dnnWdEAGBtbY2MjAzNcUpKimaWCQDt27dHSkoKbGxsKikfc3PzOvdXmywAGPJUNOgAtL/vhIQERvLMS5cuQSqVwsnJSacyN2cMtU88depU/PLLLygsLNSUxcbG4uHDh5gyZUqV15w/fx4TJ05EeHg47t69iy1btiA6Olojj1qtxhtvvAE+n4/Lly9j8+bNWLRoUZVtffbZZ/j4449x48YNcLlcvPXWW1i4cCHWr1+P8+fP4/79+/j000819fPz8xEWFoYLFy7g0qVLaN26NQYOHIj8/PzaB5liGjT2mmVYWBjp1asXuXnzJuOTnp5O4uPjCQCybt06kpqaSrZv304cHBwIAJKdnU0IIeTChQuEzWaTNWvWkHv37pHNmzcTKysrYmFhoenjwIEDhMfjkU2bNpF79+6RNWvWEA6HU+N+TsU9sHI++eQTIhQKGXtg69evJ2ZmZuTYsWMkOTmZfPzxx8TMzIxxbVV7GOHh4aRnz56a4zFjxhBfX19y48YNcvXqVdKnTx/C4/E0e2CFhYWkdevWpFevXuTcuXPkwYMH5MyZM2TOnDnk8ePH1fZTkfI9sPKxq4iLi4tmD4wQQl555RXSo0cPcvfuXRIbG0s6d+7M2APT9r6lUikZO3YsuXPnDjl8+DCxtbUlixcv1tShe2C1Y6z7xNnZ2UQoFGq+o4QQMmHCBNK9e3fN8bZt2xj99O3bl3z++eeMdnbs2EHs7e0JIYQcP36ccLlc8s8//2jOHz16lLEHVr5H+91332nq7Nq1iwAgf/zxh6YsIiKCeHt7Vyu/SqUiMpmM/P7779XWoZgWBpmBxcbGIigoiPFZunQpAgMDERUVhVWrVqFNmzbYuXMnIiIiGNcGBwdj8+bNiIqKQmBgII4dO4Z58+ZBKBRq6gwbNgzr169HZGQk/P39sWXLFmzbtg29evWqk5wLFiyAVCpllM2cORNvvPEGRo8ejS5duiArKwuzZ8+u8xisWbMGTk5O6NGjB9566y0sWLCAsXckFotx7tw5ODs744033oCvry+mTp2KkpISmJmZ1bm/2vjhhx+gVCrRoUMHzJ07FytWrGCc1/a++/bti9atWyMkJASjR4/G66+/jiVLluhc3uaMofaJLSws8MYbb2iWEfPy8rBv3z5MnTq12msSEhKwbNkyzT6uVCrF9OnTkZGRgaKiIiQmJsLJyYmxJ9u1a9cq2woICND8bWtrCwBo27Yto6ziPvPTp08xffp0tG7dGubm5jAzM0NBQUGlfVuKCWNoDaoLpk2bxngLpBgGY7SeM0VqGseHDx8SgUBA5s6dS/7880+SnJxMvv/+e8ZMu127dmTp0qWM69avX8+YGbVo0YJER0cz6qxbt464ubnVKNsff/xBAJCUlBTy7bffEplMRgoKCjTnX56BCYVCsmrVKpKSklLpo1KpquwzJyenyhlYRSvZqlYXXu47NDSUdOzYkRw+fJjcvn2bpKSkkJYtWzJWHiimDbdG7WakREZGon///pBIJDh69ChiYmKwadMmQ4tFoeidivvE5cY3L/vi1WWfOCwsTFOmzT5x79694ebmhm3btuHMmTMYM2YMJBJJtfXbt2+P5ORkeHp6Vnne19cXjx8/RkZGBuzt7QGU7Zvqgri4OGzatAkDBw4EUBYY4Pnz5zppm2IcmKQCu3LlClavXo38/Hy4u7tjw4YNmDZtmqHFolB0Rm5ubiVDGisrK3h6ekKhUGDjxo0YMmQI4uLisHnzZka9OXPmICQkBFFRURgyZAhOnz6No0ePgsViaeq8//77GDVqFIKCgtCvXz/8/vvv2L9/P06dOlWjXCwWC1OmTEFUVBSys7Oxdu3aGut/+umnGDx4MJydnTFixAiw2WwkJCTg9u3bWLFiBfr16wcvLy+EhYXhyy+/RF5eXo2RcOpC69atsWPHDnTs2BF5eXl4//33IRKJdNI2xUgw9BSQQqEwCQsLIwAqfaZOnUoIISQqKorY29sTkUhEQkNDyfbt2ystp3377bfEwcGBiEQiMmzYMLJixQpiZ2fH6GfTpk3E3d2d8Hg84uXlRbZv366VfI8fPyZsNpv4+/tXOvfyMh4hhBw7dox069aNiEQiYmZmRjp37ky+/fZbzfnk5GTSvXt3wufziZeXFzl27JhOlhBv3LhBOnbsSIRCIWndujXZs2dPJeMlimnDIuQlZyQKhdLkmD59OpKSknD+/HlDi0Kh6AyTXEKkUCg1Q/eJKc0BOgOjmDwKlRqZ+XJkFpTiab4cmfmlyC1WQq5SQ65SQ6FSQ64k//ubQEUI+Bw2RDw2hDwOJDw2uCwWzEVcWIh4sDcXwtlSBBuZwNC3Vm9GjRqF2NhYzT7xnDlzKuW6o1BMHarAKCYDIQSPs0uQlFmA5KeF+Du3GJn5cmQXKdCgL7FajexCRaViMZ8D5xYiuFiK4GwpgoulGF62EtiZCatohEKhNDZUgVGMliK5CklPC5CcWYCkp4VIeVaIQrlK5/0UFikgV6lrr/g/7M0FCHI0R3tnc7R3skBLKV/nMlEolNqhCoxiVDzNL8WVRzm4nJaDu08KoNLz15PHYSEzp6RBbTi3EKG9szm6uLZAF1cLcDlGFWKUQmmyUAVGMTjPCkpxPjUbFx68QOrzotov0CFmQi4ePSusvaKWmAu56OXVEq/6WaNtK92H/KJQKP9BFRjFIKjUBH8+zMbhu5lIfFLQsD2sBmAj5SM5Qz/RyVuZC9HfpyVe9bOBUwvqQEuh6BqqwCiNSl6JEieSnuHI3UxkVWE40dg4WQjx1+NcvfcT4GCG0R1aIdjDEuwKETEoFEr9oQqM0ig8elGM328/xdn7L+pkMKFv3K1EuJ6W02j9OVoIMbpDKwzwtwWfS/fKKJSGQBUYRa88elGMmCt/43ojzHLqQ+uWYlx5mN3o/baU8DG2kwNeb2sLAY/T6P1TKE0BqsAoeiGrUI6frv2L0ynPoTbib5i3tRiXHjS+AivHUszD5G7OGNLWli4tUih1hCowik4pkqtw4K8n+PXWU5QqjWepsDq8rSW49OCFocWAt60E4b3d0YZaLlIoWkMVGEUnqAnB8cRn2HXjX+QWKw0tjtZ4WYtx2YAzsIqwAIT62WBWDxdYSqhzNIVSG1SBURrMk7xSbDj7EHeeFBhalDrjaSXC1UY04tAGCZ+DyV2d8EZQK3DZdFmRQqkOqsAoDeLo3UxEX/kbJQrjXy6sCtcWQtxMN04DE29bCT4d6E19yCiUaqAKjFIvnhfIsfFcGuL/yTO0KA2ilZSPO3pyZNYFIh4bc/t4YIC/jaFFoVCMDqrAKHXmTEoWtl5M10tg3cbGUshB6rPGDV9VH/r5tMSCfh4Q82kKPwqlHKrAKFqjUKmxJS4dJ5OfG1oUnSHmAP/klBpaDK1oZS7EpwO94GcvM7QoFIpRQBUYRSuyCuVYdSoVyZm6C3xrFKjUyC4yfEgrbeGyWXi7pxveDLI3tCgUisGhCoxSK2kvirEvIQPn7hveX0rXFBbJIVeZ3k9gVIdWeDvEFSzq/ExpxlAFRqmRG3/nYsufjyFXETiZCZBg4kYbFdFFLjBD0tvLCh+95kVjKlKaLVSBUarlRPJz7I7PQPk3hMtmQcpj40Ej5+zSF+ZCLtJ0mAvMEAQ4mCFiqC9kQmrcQWl+0Fc3SpUcTXyGXTf/U14AoFQTqABYNZEoEUKe6X/9//onD7N3/4UneaY7k6RQ6ovp/4IpOudo4jP8kvCkynP5pSrYmgsgaALLVnyO6d8DUBbx//92/YX0F01jZkyhaEvT+AVTdEZNyqucJ/lytGklg6mbD/CaiAIDgKxCBebtvYN/TXhPj0KpK03nF0xpMNoor3IeZpegg4u5niXSL01IfwEAnhXIMXfvbTyly4mUZkIT+wlT6suxJO2VVzkPX5SgbSvTdaplm/wcsjJSAQdzdiYgu1BuaFEoFL1DFRgFl9Nz8HN83ZQXABAAz4oUcLE01WCzTcsA18dWgltpOUh+UoC3dyagqNR00tpQKPWBKrBmTtqLYvxw+e96Xy9XEbA5bLQQ8XQoVePQlBxI/OykuH7/BeT/SyJ65588vPfzLShVppklgELRhnorsEmTJmHYsGE6FEU3LFmyBCwWC6+99lqlc19++SVYLBZ69eqls/569eqFuXPn6qy9xiSnWIEN59MaHIkit0QJB0sReBzTWpJTNxEN1sZOikv3nkOpZt7Pn6kvsOFUqoGkolD0T5Ocgdnb2+PMmTP4+2/mzOKHH36As7OzgaSqGbm8cfcsFCo1Np5/hGwdZU/+N68UgY6mZdShaAKzkzZ2UsQlP692NhlzMR2n7mY2rlAUSiOhNwUWFRWFtm3bQiKRwMnJCbNnz0ZBATNj79atW+Hk5ASxWIzhw4cjKioKFhYWjDrffPMNPDw8wOfz4e3tjR07dtTat42NDV599VXExMRoyi5evIjnz59j0KBBjLpVzaCGDRuGSZMmaY43bdqE1q1bQygUwtbWFiNGjABQNgs9e/Ys1q9fDxaLBRaLhbS0NADA7du3MWDAAEilUtja2mLChAl4/vy/KO69evXCO++8g7lz56Jly5YIDQ0FIQRLliyBs7MzBAIBWrVqhXfffbfW+60PP1z5Bw9eFOu0zQcvitHR2UKnbeoTU4yBWBF/WwnitMgM8NnBu0hrItFTKJSK6E2BsdlsbNiwAXfu3EFMTAxOnz6NhQsXas7HxcVh1qxZCA8PR3x8PPr374+VK1cy2jhw4ADCw8Mxf/583L59GzNnzsTkyZNx5syZWvufMmUKoqOjNcc//PADxo0bBz6/blEkrl27hnfffRfLli1DcnIyjh07hpCQEADA+vXr0bVrV0yfPh0ZGRnIyMiAk5MTcnJy0KdPHwQFBeHatWs4duwYnj59ilGjRjHajomJAZ/PR1xcHDZv3ox9+/Zh7dq12LJlC1JSUnDw4EG0bdu2TvJqw9GkZ7j0KEfn7QLAw5xi+NlJ9dK2rik10XxmbBbgYy3GxXtZWtUvKFXhvZ//QpGJ3i+FUh16C6BWcVbj6uqKFStWYNasWdi0aRMAYOPGjRgwYAAWLFgAAPDy8sLFixdx6NAhzXWRkZGYNGkSZs+eDQB47733cOnSJURGRqJ379419j948GDMmjUL586dQ4cOHfDLL7/gwoUL+OGHH+p0H+np6ZBIJBg8eDBkMhlcXFwQFBQEADA3Nwefz4dYLIadnZ3mmq+++gpBQUH4/PPPNWU//PADnJyccO/ePXh5eQEAWrdujdWrV2vqHD58GHZ2dujXrx94PB6cnZ3RuXPnOslbG49zSrD/r6c6bbMihAA5pSo4Wgjxt5E71RYrTO+BzmWz4NZCiMt1zAyQmlmI5b8lImJEGz1JRqE0PnqbgZ06dQp9+/aFg4MDZDIZJkyYgKysLBQVlS1lJCcnV3o4v3ycmJiI4OBgRllwcDASExNr7Z/H42H8+PHYtm0b9uzZAy8vLwQEBNT5Pvr37w8XFxe4u7tjwoQJ2Llzp+YeqiMhIQFnzpyBVCrVfHx8fAAAqan/bap36NCBcd3IkSNRXFwMd3d3TJ8+HQcOHIBSqTtTaKWa4LtLjytt9uuaEqUaQj4XZkYeYLZIblp7YHwOC45mfFx7kF2v64/ceoo9V+tvcUqhGBt6UWBpaWkYPHgwAgICsG/fPly/fh1ff/01gMY1VpgyZQr27NmDr7/+GlOmTKmyDpvNxssB+RWK/xIcymQy3LhxA7t27YK9vT0+/fRTBAYGIicnp9p+CwoKMGTIEMTHxzM+KSkpmuVHAJBIJIzrnJyckJycjE2bNkEkEmH27NkICQlhyNMQfrv9FOmNNCt6UayAa0sxuGzjtUwsMCE/KRGPDWsRDwmPchvUztqT9/E017hnxhSKtuhFgV2/fh1qtRpr1qzBK6+8Ai8vL/z777+MOt7e3rh69Sqj7OVjX19fxMXFMcri4uLg5+enlRz+/v7w9/fH7du38dZbb1VZx9raGhkZGZpjlUqF27dvM+pwuVz069cPq1evxl9//YW0tDScPn0aAMDn86FSMZei2rdvjzt37sDV1RWenp6Mz8tK62VEIhGGDBmCDRs2IDY2Fn/++Sdu3bql1f3WxIOsIhxJfNbgdurC37mlCHI2TstEAZet95morpAJuZBxWLirg1xshaUqRBxJ1oFUFIrhadAaT25uLuLj4xllVlZW8PT0hEKhwMaNGzFkyBCNkUJF5syZg5CQEERFRWHIkCE4ffo0jh49ysgw+/7772PUqFEICgpCv3798Pvvv2P//v04deqU1jKePn0aCoWiknVjOX369MF7772Hw4cPw8PDA1FRUYzZ1aFDh/DgwQOEhISgRYsWOHLkCNRqNby9vQGU7e9dvnwZaWlpkEqlsLS0xNtvv42tW7di7NixWLhwISwtLXH//n3s3r0b3333HTgcTpWyREdHQ6VSoUuXLhCLxfjxxx8hEong4uKi9f1WhUKlxveX/4YhjO5Ss4rR3tkcN9IbNnPQNSITSaViKeZBrVAhRYdWhGeSnuPU3Uz087PRWZsUiiFo0K84NjYWQUFBjM/SpUsRGBiIqKgorFq1Cm3atMHOnTsRERHBuDY4OBibN29GVFQUAgMDcezYMcybNw9CoVBTZ9iwYVi/fj0iIyPh7++PLVu2YNu2bXVyRJZIJNUqL6BsmTEsLAwTJ05Ez5494e7uzjAQsbCwwP79+9GnTx/4+vpi8+bN2LVrF/z9/QEACxYsAIfDgZ+fH6ytrZGeno5WrVohLi4OKpUKr776Ktq2bYu5c+fCwsICbHb1Q25hYYGtW7ciODgYAQEBOHXqFH7//XdYWVlpfb9VceDWU/ybV9qgNhpCek4JvG2NyzJRyK36JcKYsJbyUVqswCM9mMB/cSQZ+SWms4RKoVSFUWVknj59OpKSknD+/HlDi9JkyMgrxSfHUqAy8HKZiMeGSqnGEwMq0oo4txAiwchmhRVxMBciM7sYz/P1N14jOjrgkyE+emufojtYLBYOHDhglNGPDIlB11EiIyORkJCA+/fvY+PGjYiJiUFYWJghRWpy/ByfYXDlBQDFCjXMxDxI+MYx8+EZsXGJSwsR/nleqFflBQD7rv+D+PQcnbdrrGHmyvn777/B5/PRpo3xuRQsWbIE7dq1q1SekZGBAQMGNL5ARo5BFdiVK1fQv39/tG3bFps3b8aGDRswbdo0Q4rUpLjzJB8J/+YbWgwNzwsVaG0rhTHoDrYxCFEFHi3FSM3IQ26RbixPa4IQYN3J+3rvx9iIjo7GqFGjkJeXh8uXL9daX1dWwA3Bzs4OAoHA0GIYHQZVYL/88gsyMzNRXFyMO3fuYNasWYYUp0lBCMEv9UiRom/Sc0rQwcXC0GKAzTI+BeZtI8GdRzkoLG08B+ub6bm4eF+7iB66wpBh5ggh2LZtGyZMmIC33noL33//PeN8WloaWCwWfv75Z/Ts2RNCoRA7d+6EUqnEu+++CwsLC1hZWWHRokUICwtjzDTVajUiIiLg5uYGkUiEwMBA7N27V3M+NjYWLBYLf/zxBzp27AixWIxu3bohObnMKjQ6OhpLly5FQkKCJjRdeTQhFouFgwcPMmTcv38/evfuDbFYjMDAQPz555+Me9m3bx/8/f0hEAjg6uqKNWvW1Do+poZpmGJR6szl9NxG8/mqK6lZxQhyNDO0GEaFr60UNx68QKmy8Z2rN5150Kj9GTLM3JkzZ1BUVIR+/fph/Pjx2L17NwoLCyvVW7x4McLDw5GYmIjQ0FCsWrUKO3fuxLZt2xAXF4e8vDyNQiknIiIC27dvx+bNm3Hnzh3MmzcP48ePx9mzZxn1PvroI6xZswbXrl0Dl8vV+KiOHj0a8+fPh7+/vyY03ejRo6u9l48++ggLFixAfHw8vLy8MHbsWE3gg+vXr2PUqFEYM2YMbt26hSVLluCTTz5hhNdrChiVEQdFN6jUBB8euYfMAuPNysths2DOZ+P+M8MEmfVqKcblh/WLaKFr2thJ8ee95zDkVuXGcYEI8Wqpk7YmTZqEnJycSg/46ti7dy9mzZqlCXY9ZswYFBQUMMLKjR8/HocOHdK4uAQHB8Pf3x/ffvutps6oUaNQWFiIw4cPV9vXuHHjYGNjg7Vr1wIA2rVrh7lz52qCd6elpcHNzQ3r1q1DeHi45jo7OzssWLBAE/pOpVLB3d0dQUFBOHjwIEpLS2FpaYlTp06ha9eumuumTZuGoqIi/PTTT4iNjUXv3r01UYoA4MiRIxg0aBCKi4shFAqxZMkSHDx4sJJ7UkUjjnIZv/vuO0ydOhUAcPfuXfj7+yMxMRE+Pj4YN24cnj17hhMnTmjaWLhwIQ4fPow7d+5o9X8xBegMrAly+VGOUSsvoEzJlqrLTMUN1b8x0PZ/6VAMLc6m0403CzNUmLmcnBzs378f48eP15SNHz++0jIiAHTs2FHzd25uLp4+fcqQgcPhMELB3b9/H0VFRejfvz8jhNz27dsZ4eMAMELa2dvbAwAyM+ue8qamdqobn5SUlEqBF0wZ4w5WR6kXJ7WMUm5oCuUq2MgEKChVoljRuEtnCkNrDABtbKW4oEU6lMYgMSMfpxOfoY+vtV77KQ8z93//939YuXIlLC0tceHCBUydOhVyuRxisVhvff/0008oKSlBly5dNGWEEKjVakaQbaBymLfaKN/DO3z4MBwcHBjnXja+4PH+y15eHrhBra77919X7ZgydAbWxEh5Voi0bN3m+dInmQVy+NjLGt0yUa403FsoC4CvjQRx94xDeZXz7dmHeu/DkGHmvv/+e8yfP58RnzQhIQE9evSoMUuFubk5bG1tGTKoVCrcuHFDc+zn5weBQID09PRK4eOcnJyqH5CXqCo0XX2obny8vLyqjQRkitAZWBPDVGZfFXmUXYIOzha4qqccZVVR2sgzvnLYLMDTSoxLKcb3f0rMyMdfj3MR4NTw+JXGFmYuPj4eN27cwM6dOzWZIcoZO3Ysli1bhhUrVlR7P3PmzEFERAQ8PT3h4+ODjRs3Ijs7WyOTTCbDggULMG/ePKjVanTv3h25ubmIi4uDmZmZ1v6trq6uePjwIeLj4+Ho6AiZTFYv8/n58+ejU6dOWL58OUaPHo0///wTX331lSadVVOBzsCaEC+KFLjxt/FGl6iJ1BfFCHBoPMvEYgMkd+RxWHC1EOJqat1yeTUmP+so3YqxhZn7/vvv4efnV0l5AcDw4cORmZmJI0eOVHs/ixYtwtixYzFx4kR07doVUqkUoaGhDJmWL1+OTz75BBEREfD19cVrr72Gw4cPw83NTetxe/PNN/Haa6+hd+/esLa2xq5du7S+tiLt27fHL7/8gt27d6NNmzb49NNPsWzZMkam+aYAtUJsQuxJeNLoEed1CY/NgpjHxkM9xP57GbVChdxGjAUo5LFhI+ThlpG/YPC5bJx4LxgtJIYxrqkOYwszp1ar4evri1GjRmH58uWGFqfZQpcQmwgKlRrnjPjNXhsUagI1AEsJDy8K9Rv9oKARZ2BSAQdSDtvolRcAyJVqHPnrCcZ1dTaoHJGRkejfvz8kEgmOHj2KmJgYgy5/PXr0CCdOnEDPnj1RWlqKr776Cg8fPqw2TROlcaBLiE2EhH/zG/WhrC/yS1WwMxdCwNXfV1PAZTeaGb2FiAs+AZIzjCekV238Gp9ReyU9Y2xh5thsNqKjo9GpUycEBwfj1q1bOHXqFHx9fQ0mE4UuITYZNl9Mx2Ujjq5eV9xaiHBdD4FmgTKl8jCzcvQFXdNSwkdJiRz/vDDOiCg18fOszvCxlxlaDAqlRugMrAmgUKmNKmivLniYXYyOeoqZKOLp34zY3kyA/MJSk1ReAHD0lvHF0aRQXoYqsCbAnScFKDFADD198/BFMdq00v0sgMfRr9OZk4UQT18UITPXOHKf1YdzJuiOQWl+UAXWBLj2uOksHVaEAHhepIBzC2GtdesCr4as2A3FzUqER08LkK1nIxR98+BZIf7NMR2HeErzhCowE0epJohvYsuHFZGrCLhcDixEujOY5ejpW9/aWoKkx7nIb0TzfH1ygc7CKEYOVWAmTtLTAhQ2AevDmsgpUcLRUqyzpT+WHnKB+dhKkPDwBUoMFOFDH5xLMa5QVxTKy1AFZuLcfVpQe6UmwL95pQh0bHiIIwBla5M6xN9Oimv3X0ChaloGvVcfZqNU0bRfjiimDVVgJs79RohaYSw8eFGMDs4NV2JqHXqOtLEvy+VlLOlZdEmJQo1raTmGFoNCqRaqwEwYpZqYVOR5XZCWUwI/O2mD2tCVsmljJ0Vc0nM0ZU/KSw9MO7oLpWlDFZgJk55d3OSWrWqDECCnVAUHi7pH6C5HqYMx87ctS0TZ1Ek0oQgilOYHVWAmTHNaPqxIiVINkYAHmaB+lokNyQXGZgE+1hJcNLJcXvoi+QlVYBTjhSowEyY1q3kqMKAsdYybtRjcemTCrK/TN5fNgnsLES7fbz7m5XnFSuoPRjFaqAIzYVKb6QysnL9zSxFUD6OOonq4HQi4bDjK+Lj+MLvO15o6SRnNw9KVYnpQBWaiFMpVyCoy7WgPuiA1qxjt65hBuKi0bgpMzOfASshFQhMKllwXkug+GMVIoQrMRHmab7px9nTN49wSeNtKtKrLAlAk1z5ShpmQCzGbhcR/8uopnemTRPfBKEYKVWAmClVg/6EiQKFCDTtZ7ZaJQh4b2hohWop5YKlUSG0mzuLVkdLM759ivFAFZqLklyrRQsSFHqIimSRFCjXMJDxI+DWnShFqmUrFVsZHcZEC6c+pAUNmfilo2kCKMaK7CKmURiWnRAUOhw0bqQAyIQciLhtcDhsgBKVKNQrlauQWK5BbotR15CSj5XmhAq1tpfjr71xU56ss1CLTs4N5WTqUrAK5jiU0TZQqgpwiBVpI+IYWhUJhQBWYiZJbUmbAoSIEOcVK5FRRh8tlw9ZMAJmAAxGPAw6bBUII5Eo1CkpVyClWIq+0aUROLyc9pwQdnC1w9VFOlef5tQQEdrEU4dGTfOQWN61xaSjPC+RUgVGMDqrATJQcLR+wSjVBdrES2VXU5/PYsBcKIONzIeSxwWWzoP7fDK6gVIXsIgUKTDDSfeqLYrRzNEP835UNL7g15FLxaClG0uPcepnZN3WyCuRobWtoKSgUJlSBmSj5Opo5KVQEL4oVQBVbPUI+B2YiLmQCLoRcNjhsFtRqghKlGgVyJbKLlEabyuXffDk8W4orRSvhVLNp6GMjQfzDbJQ2wczWuuBZATUaohgfVIGZKPJGioEoV5Fq/c1EfA5aiMsMJ8oVnEpdNoPLL1XiRZECxQbKj6VUE8gJYC3l41mFvayq9JefnRRXU7KgbIIR5XVFVj7dD6QYH1SBmSCEEKNJ31GiVFcbmkki4MJKwoZUwIGAywaHxYJSTVCiUP1PwSn1OuMpkKtgKxMgv1T5X6LJl6zp2tiVpUMxkuE0Wp5TgxaKEUIVmAliSjOFmhScTMiFLY8NCb9MwbHBgpIQFCtUKChRIqtI0eCZ5tMCOfzsZbiZngsCMBRVG7vmEVFeF9TF+ZtCaSyoAjNBmlIKlSKFGkXVLDOaicqWJyV8DvgcFlgAVGqgWKFC3v8UnDbKPC27BB1dyiwTy2euzSUdiq4wlhk/hVIRqsBMEFOagTWUQrmqWkOR8v03CZ8DHocNNgCFWo1ihRq5JUpkV1BwqS+KEeBghpyCUvjaNJ90KLqCKjCKMUIVmAmiVFNLOQAgKNvnqs7Uv4WYB6mAAzGfAz6bBQ4LaGstglwJ9PCwalxhTRxrGfUBoxgfVIGZIM1pBtYQCID8UhXyS1WwlfLgbCGEi7kIYh4XXDYLciUdR21pIaGPCorxQWMhmiD1SeLYnPGzlYDNZkHMZ0OuUkOpVuNFoQI8DouOpZaU7UBSKMYFVWAmiJCrXUDa5o6Yx0YbOwmeF8oh43OQXaQAWEBGfgn4XBayixTIK1FAwGOD6rGaoUGjKcYIVWAmiJDHpu/DteBiIYStjI/M//kv2ZsJQFDmQ6cm/y3DqklZmKQihQoiPh3X6qAKjGKMUAVmgrBZLAi0iKreHGGzgLZ2EpQo/7NelPI5yCkuU2Tl24dZxXJIBP+NoVJF8CxfDoVaDSGPju3LsKgGoxgh9JdqotCHbGVaiLjwthbjaYGckULGyUKoUVzqCpE4MgtLK+2BlSjU/4s6QehLQgVqi+JPoRgC+gs1UUR0H4yBV0sxpHxOpbiNAg4b+SX/lVX0AZerCNjVDGNBqQpZhXJw2QCPPrzBp8qcYoTQb6WJIqIzMABlyiXAToqcEgVKVZX941wthVBUcDt42YfuaUEpxPzqxzKnWImcIgX4XBZqyMTS5KEzMIoxQp07TBSZkP7r7KR8yIQcPKkm1QeXzUKxgunkrFSRSibh2SUKiDicagP6EgAvChXgsMuco0uV5OWYwE0eHp2BUYwQ+q00UWyaeXZcf1sJWCyC3JLqg8y6WYoqRbtXVBHFpEihgkCLGa1KDTwvUKBUqWpWM2AumwUO9TOgGCHN51fYxLBppqF9xDwO2thJ8KxQjppiGrNZgLKKJUV5FWVAmW+YtoYxciXBswI51IQ0C2MaHpcqL4pxQtehTBQbafNTYC4thGABGt+umnBtIUJhFSlAFCoC8CrXJwCKlEqw6/BOVyRXoUiugpmQCy6n6YamogYcFGOFfjNNFGsJv9k43Zb5dklRolChSFF14N6Xqc5tiaD6UFy5JUqGb5i25JUom3RoKn5ztl6hGDX0m2mi8DhstBBXMZVoYrQQ8f7n21UKbec3LhZCFJRWvzdW035ORkFpvS3uykNTCXmsJhWaik+XEClGClVgJkxTX0b0shZDwmdV8u2qDUEtD9yaFJhKTaDUWlVWRk3KDD2K5GWGHk3h0d8c9vkopgn9ZpowdjKBoUXQCzwOCwH2UuQUKyCvY/bpVmaCGi0TAdQ6O8oqktdrKbEiSnWZoYdCrTZ5i0URnzrNU4wT0/5lNXNcWggNLYLOsZfx4dpCiCf5Vft21YaZoPaHLVuLuH6ZhXKdmI6XKNR4ZsKhqUR8NjWhpxgtpveLMhJ69eqFuXPnao5dXV2xbt06ra9fsmQJ2rVr1yAZ3C3FTWKJqhx/WwmAmn27asJawkN2cd2WG6tDrlJDl9G6TDU0lUSLFwJKw4iOjoaFhUWD26nrMwgADh48CE9PT3A4HMbzzFSokwKbNGkShg0bpidRGkZeXh4++ugj+Pj4QCgUws7ODv369cP+/ftBGiFswtWrVzFjxgy991MRMZ/TJPzBJHztfLtqo6VES6MWLfXHk1rCTNWH8tBUAhMJTdVQBWasz4zqXiDT0tLAYrEQHx/f6DIZgpkzZ2LEiBF4/Pgxli9fbmhx6kyT8APLyclB9+7dkZubixUrVqBTp07gcrk4e/YsFi5ciD59+tTrDYcQApVKBS639mGytrauh+QNx9NKjKf5tftFGSuu/1sG1ca3qyYshNyyhJVaUJcXmpxSBQRsjk5DRxEAWSYSmkpKZ2BNloKCAmRmZiI0NBStWrUytDj1QqfvgFFRUWjbti0kEgmcnJwwe/ZsFBQUMOps3boVTk5OEIvFGD58OKKioiopl2+++QYeHh7g8/nw9vbGjh07auz3ww8/RFpaGi5fvoywsDD4+fnBy8sL06dPR3x8PKRSKQBgx44d6NixI2QyGezs7PDWW28hMzNT005sbCxYLBaOHj2KDh06QCAQ4MKFCygsLMTEiRMhlUphb2+PNWvWVJLh5el7Tk4Opk2bBmtra5iZmaFPnz5ISEio44jWjpe1ROdtNgZsFhBgL0VxHXy7aqI8YaU21EVZFMpVEOp4FlaOJjSVwjhDU4n4bHD1PE001DNDW6pa3jt48GCl/Gi//vor2rdvD6FQCHd3dyxduhRK5X9L4Tk5OZg5cyZsbW0hFArRpk0bHDp0iNHG8ePH4evrC6lUitdeew0ZGRmacy9vWQDAsGHDMGnSpGplr2lsY2NjIZPJAAB9+vQBi8VCbGys5p6dnZ01471mzRrGGFQ1q547dy569eqlOVar1YiIiICbmxtEIhECAwOxd+9ezfnyZ+0ff/yBjh07QiwWo1u3bkhOTq72fqpCp99ONpuNDRs24M6dO4iJicHp06excOFCzfm4uDjMmjUL4eHhiI+PR//+/bFy5UpGGwcOHEB4eDjmz5+P27dvY+bMmZg8eTLOnDlTZZ9qtRq7d+/GuHHjqnyLkEqlmhmUQqHA8uXLkZCQgIMHDyItLa3KL8DixYvxxRdfIDExEQEBAXj//fdx9uxZ/Prrrzhx4gRiY2Nx48aNGsdi5MiRyMzMxNGjR3H9+nW0b98effv2xYsXL2obxjrhYSWGCW2pAAAsxTx4WYvxJF97366aqJiwUhvUdZzu1CXMVH2Qq8pDUxlXMk2zRggYbYhnhq45f/48Jk6ciPDwcNy9exdbtmxBdHS0Rk61Wo0BAwYgLi4OP/74I+7evYsvvvgCHM5/s9uioiJERkZix44dOHfuHNLT07FgwYIGyVXT2FZUFvv27UNGRga6deuGy5cvY+rUqXjnnXcQHx+P3r17Y8WKFXXuOyIiAtu3b8fmzZtx584dzJs3D+PHj8fZs2cZ9T766COsWbMG165dA5fLxZQpU+rUj06/oS8bNaxYsQKzZs3Cpk2bAAAbN27EgAEDNP8YLy8vXLx4kfEmEhkZiUmTJmH27NkAgPfeew+XLl1CZGQkevfuXanP58+fIzs7Gz4+PrXKV3Fw3N3dsWHDBnTq1AkFBQWaWRoALFu2DP379wdQNs3+/vvv8eOPP6Jv374AgJiYGDg6Olbbz4ULF3DlyhVkZmZCIBBo7uvgwYPYu3evTvfKBFw2XC1FSM0q1lmb+sTbWoxCuRIv6ujbVRNOFkK8KNJegdV1n40QoFipqhTFXtcUydUoksuNJjSVTKT/5UNDPDPKuXXrFuN3D9RtebmcpUuXYvHixQgLCwNQ9mxZvnw5Fi5ciM8++wynTp3ClStXkJiYCC8vL02diigUCmzevBkeHh4AgHfeeQfLli2rsywVqWls+Xw+bGxsAACWlpaws7MDAKxfvx6vvfaaRtGVj/exY8e07re0tBSff/45Tp06ha5duwIou98LFy5gy5Yt6Nmzp6buypUrNceLFy/GoEGDUFJSAqFQOwtrnb7unTp1Cn379oWDgwNkMhkmTJiArKwsFBUVAQCSk5PRuXNnxjUvHycmJiI4OJhRFhwcjMTExCr7rMsX7vr16xgyZAicnZ0hk8k0A5eens6o17FjR83fqampkMvl6NKli6bM0tIS3t7e1faTkJCAgoICWFlZQSqVaj4PHz5Eamqq1vJqS4C9TOdt6hr+/3y7suvh21UTLyes1IaXc4JpQ06JosG+YdrCCE1loOk1h1VmJKRvDPHMKMfb2xvx8fGMz5EjR+p8DwkJCVi2bBnjtz59+nRkZGSgqKgI8fHxcHR01CivqhCLxRrlBQD29vaM7Y36UNvYVkViYiLjWQdAo4S05f79+ygqKkL//v0ZY7J9+/ZKz7+AgADN3/b29gBQp/vW2QwsLS0NgwcPxv/93/9h5cqVsLS0xIULFzB16lTI5XKIxWJddcXA2toaFhYWSEpKqrFeYWEhQkNDERoaip07d8La2hrp6ekIDQ2FXM58e5dIGravVFBQAHt7e82ackV0YS77Mu1ameG3u8+gqi6hlYFpJeNDzOfU27erJlwthcipo+l8VTnBtOFJQSkshfyygMCNQHaRAmwWYCnhQa4k1eYr0wcWEl6lfR5dY6hnRjl8Ph+enp6MspcNtthsdqWXZIWC+X0rKCjA0qVL8cYbb1TqQygUQiQS1SoLj8e0oGWxWIx+tZGjIvoc29pkKd9nO3z4MBwcHBj1ylekyql43+XfN3UdXjB19kp5/fp1qNVqrFmzBq+88gq8vLzw77//Mup4e3vj6tWrjLKXj319fREXF8coi4uLg5+fX5X9stlsjBkzBjt37qzUH1A2mEqlEklJScjKysIXX3yBHj16wMfHRytN7+HhAR6Ph8uXL2vKsrOzce/evWqvad++PZ48eQIulwtPT0/Gp2XLlrX2WVfEfA58jNCYg4Uy3y4CgrwaYhPWl6oSVmqDvB4zMKAsugZhNe5LgqFCU1lK9R9n01DPjLpgbW2N/Px8FBYWaspeNrFv3749kpOTK/3WPT09wWazERAQgL///rvGZ4Y2clQ06lCpVLh9+3a19bUZ26rw9fVlPOsA4NKlSzXKAjDHxM/PDwKBAOnp6ZXGw8nJqVYZ6kKdZ2C5ubmV/oFWVlbw9PSEQqHAxo0bMWTIEMTFxWHz5s2MenPmzEFISAiioqIwZMgQnD59GkePHmW86b3//vsYNWoUgoKC0K9fP/z+++/Yv38/Tp06Va1MK1euRGxsLLp06YKVK1eiY8eO4PF4OH/+PCIiInD16lU4OzuDz+dj48aNmDVrFm7fvq2V34NUKsXUqVPx/vvvw8rKCjY2Nvjoo4/AZlev+/v164euXbti2LBhWL16tebLc/jwYQwfPpyxRKkr2juY4c7TgtorNhISPgduLYTILNSfib+bpQh5dVw+BMqclAXs+i2PPSuUw8FMiKLS+inB+lIemkrIY0Mm4KJYob/+RTy2TpcPjfGZoS1dunSBWCzGhx9+iHfffReXL19GdHQ0o86nn36KwYMHw9nZGSNGjACbzUZCQgJu376NFStWoGfPnggJCcGbb76JqKgoeHp6IikpCSwWC6+99ppWcvTp0wfvvfceDh8+DA8PD0RFRSEnJ6fa+tqMbVW8++67CA4ORmRkJIYOHYrjx49X2v/q06cPvvzyS2zfvh1du3bFjz/+iNu3byMoKAgAIJPJsGDBAsybNw9qtVrj4hQXFwczMzPNXqEuqPMMLDY2FkFBQYzP0qVLERgYiKioKKxatQpt2rTBzp07ERERwbg2ODgYmzdvRlRUFAIDA3Hs2DHMmzePsWE3bNgwrF+/HpGRkfD398eWLVuwbds2honmy1haWuLSpUsYP348VqxYgaCgIPTo0QO7du3Cl19+CXNzc1hbWyM6Ohp79uyBn58fvvjiC0RGRmp1z19++SV69OiBIUOGoF+/fujevTs6dOhQbX0Wi4UjR44gJCQEkydPhpeXF8aMGYNHjx7B1tZWqz7rip+tBEIjCVXk1kIIawlXr8qruoSV2tDQJcDnRXKDOSEzQlPx9DMfs9Lx7MsYnxnaYmlpiR9//BFHjhxB27ZtsWvXLixZsoRRJzQ0FIcOHcKJEyfQqVMnvPLKK1i7di1cXFw0dfbt24dOnTph7Nix8PPzw8KFC6FSab96MGXKFISFhWHixIno2bMn3N3dazRQ0WZsq+KVV17B1q1bsX79egQGBuLEiRP4+OOPK93vJ598goULF6JTp07Iz8/HxIkTGXWWL1+OTz75BBEREfD19cVrr72Gw4cPw83NTet71gYWaYwwFTUwffp0JCUl4fz584YUo0mwJ+EJrjzONVj/HFbZkuGTBjola4O7ZdUJK7XFRiyAsgGbSnZSAUoVht9ztBBxwWKxdLYvx2YBfg5So45/SJ8ZjUt0dDTmzp1b44zPUDR6JI7IyEj0798fEokER48eRUxMjMZkltIwOjqZGUyBWYl5sJbyGkV5AdUnrNQWLpvVIAX2pKAUrWRCFMsbdynxZXKKlWChzNBDqUaDDXksxDyjU170mUGpjkZXYFeuXMHq1auRn5+v8cWaNm1aY4vRJHGzFMPJQojHOSWN2q+3tRgFOvbtqonaElZqA1sHD+k8uQJ8cHTijN0QykNTlVssNiQ0VWMYb9QV+sygVIfBlxApuuVWRj62X6/d2kgXCDgseNtI9GIeXxNeLUX1jlhfjou5CPmlDQ9hZQyzsJfhcViwEPHqbOgh5LHhbW981qwUSnUYx64/RWe0sZM2SqbmVmZ8OFnUP29X/futPWGlNujKx+lJQYnR5flS1DM0lTHOviiUmjCuXx6lwbBYLPTysNRf+wD87SQgRD++XbWhTcJKrdDRNo+aAKXqhs/k9EGRXI3nBXKwWQCfW/MNc9ksWGqbjoZCMRKoAmuCtHcwg4UeArFKBRz42UrwrKBhebvqiy4TVurSHzm7uPHCTNUHbUJT2Zjxjc54g0KpDeP91VHqDYfNQoi7bmdhbpZCWIm5eKZH367a0DphpRboWv8+KSg1+kzL2UUK5BaXJdOsqKt4HBasZHT2RTE9qAJronRxMYe5DmZhnP/l7SqUq/Qa/aE26pKwUhvqmlKlNgwRZqo+EFJmsVgkV0H4v9BUtuZ8sPUc95BC0QdUgTVR+Bw2Bvk2LEt0SzEPrVuKG91QoyrqkrBSG3StwICyMFNiI15KrIhSTcr2x9ige18Uk8U0fm2UehHkYAZ3y9ojYVeFt7UYAh4LL3S059QQ6pqwUhsa4sRcE1lFcpjSVlKrFkK9R52nUPQFVWBNnKFtbOr0QBVw2WhrL0F2saLR0obUhpOFUOepRFR6cn8sUarB11OMQl3TQsylsy+KSUMVWBOnlZkQXV0stKwrgKO5AE/zDWeo8TL1SVipDfpUzhn5pRDVwf/KELAAuFrrN98WhaJvjPtXRtEJr3q1hKSG9BgsAG1sJVATNfIN4NtVE66WQij0sNxX35xg2pKvUDZa7q76YG8haJSMyxSKPqEKrBkg5nMw0Kdqg45y367MQnmjZvzVhvomrNQGhVLPCqxUCZGRGnSI+Ry4WNVvb5RCMSaM8xdG0Tmdnc3ha8OMc+duKTK4b1dNuFmKUKonRaNQE73PkDLyS2qNgNHYsFmAt71EJ8GMKRRDQxVYM2JUoB2kfA44bBYC7KUokCsN6ttVEw1JWKktXD0/xNUEUOh5qbKuuFmL6dIhpclAFVgzQirgYnQ7O7S2EhmFb1dNuLYQoUhPy4flNEbopBfFCkh0Fb+xgVhJebAzFxhaDApFZ1AF1szwsZHC3cr4rc8awzWpsWL/PS0s0ftsrzYEXDY8bYz//06h1AWqwJohPd0t0crMeN/EdZGwUhsaS6coVAQsjmEtZLzsJOBy6M+d0rSg3+hmCJvNwut+tkbrqyRoJMOHxoxAkVlguDBTzpZCmIkaPfk6haJ3jPMJRtE7MiEXg3zrFqWjMdBVwkptaOxbf1Hc+GGmzEVcOFoKG7dTCqWRoAqsGeNmKcaAavzDDIXOElZqQWMv6hUr1OA34qxXzOfAx15KYx1SmixUgTVz/Gxl6Ne6paHFAKDbhJXaYIhdqSf5JRA2ghITcNnwd5BWm8CSQmkKUAVGQZCDGXq4tTC0GDpNWKkNRE8BfWvsE0ChnsNMcdks+DlIwefSnzelaUO/4RQAwCsuLdDZydxg/es6YaU26CsifW3k6THMFIcN+DlIqbMypVlAFRhFQ08PKwS2khmkb10nrNQGlQGDP+ojzBSbBfi1kkGmg0zcFIopQBUYhUH/1i3hayNt1D71kbBSG5QGmoEBZWGmdJlUk80qm3lRc3lKc4IqMAoDFouFgT7W8GzEaB36SFipDfqOtVgbWcVySHSwlMhmAb6tpDAX0eSUlOYFVWCUSrDZLAz1t0WAvf6XE/WVsFIb5EaQcTqzsLRBYaYEXDbaOslgIabKi9L8oAqMUiVsNguh3tYIcbfUaz/6SlipDXIDz8DKZCBg19PeQibkIMBJBqmALhtSmidUgVFqpIuzBV73s9FLMFp9JqzUBmUj5ATThqcFpRDz6/ZTtJHx0cZBpjNT+UmTJmHYsGE6aUuXLFmyBCwWq9Ln1KlTOuvD1dUV69at01l7lMaDvrpRasXbRgpzIQ8H7zxBfqnuFI6bpQh5Blo+LIfLYUFhBEuJ2SUKiDgcrfYCXVuK4NCi+YSH8vf3r6SwLC31uzJAMQ3oDIyiFXZmAkzs4AhnC908OBsjYaU2NFZKldooUqggqCVCB4ddZqxhCOUVFRWFtm3bQiKRwMnJCbNnz0ZBQQGjztatW+Hk5ASxWIzhw4cjKioKFhYWjDrffPMNPDw8wOfz4e3tjR07dtTaN5fLhZ2dHePD5/MBALdu3UKfPn0gEolgZWWFGTNmMOQqn1lGRkbC3t4eVlZWePvtt6FQlL049erVC48ePcK8efM0szsAyMrKwtixY+Hg4ACxWIy2bdti165dDLl69eqFd999FwsXLoSlpSXs7OywZMmSOo8bpf5QBUbRGjGfg5GB9ujo2HCH58ZIWKkNHCOKE5hRQ5gpIY+NAEczWDZytJJy2Gw2NmzYgDt37iAmJganT5/GwoULNefj4uIwa9YshIeHIz4+Hv3798fKlSsZbRw4cADh4eGYP38+bt++jZkzZ2Ly5Mk4c+ZMvWQqLCxEaGgoWrRogatXr2LPnj04deoU3nnnHUa9M2fOIDU1FWfOnEFMTAyio6MRHR0NANi/fz8cHR2xbNkyZGRkICMjAwBQUlKCDh064PDhw7h9+zZmzJiBCRMm4MqVK4y2Y2JiIJFIcPnyZaxevRrLli3DyZMntR43SsNgEUPE06GYPA+yinDy3nPk1TNvl4eVqFFyftWGi7kY+UYgRznmQi7YhKnEbGR8uFmL9JrPa9KkScjJycHBgwe1qr93717MmjULz58/BwCMGTMGBQUFOHTokKbO+PHjcejQIeTk5AAAgoOD4e/vj2+//VZTZ9SoUSgsLMThw4er7GfJkiVYvnw5RCKRpszPzw9XrlzB1q1bsWjRIjx+/BgSiQQAcOTIEQwZMgT//vsvbG1tMWnSJMTGxiI1NRUcDkfTJ5vNxu7duwGU7YHNnTsXc+fOrfGeBw8eDB8fH0RGRgIom4GpVCqcP39eU6dz587o06cPvvjiC63GjdIw6AyMUi/crcSY3NkRHRzN62wI0VgJK7XBiCZgAIDcEqXGN4zPZcG3lRStjSAZ5alTp9C3b184ODhAJpNhwoQJyMrKQlFREQAgOTkZnTt3Zlzz8nFiYiKCg4MZZcHBwUhMTKyxb29vb8THx2s++/bt07QXGBioUV7l7anVaiQnJ2vK/P39NcoLAOzt7ZGZmVljnyqVCsuXL0fbtm1haWkJqVSK48ePIz09nVEvICCAcfxy27WNG6VhUAXWhEhLS8OKFSsabY2dz2Gjj6cVxrd3gI2Ur/V1jZWwUiuMSJRyMgpKYWfOR5CzucGWDCuSlpaGwYMHIyAgAPv27cP169fx9ddfAwDkcv1HUOHz+fD09NR8nJyc6nQ9j8ccQxaLBbW65v3XL7/8EuvXr8eiRYtw5swZxMfHIzQ0tNL91tS2ocetOUAVWBOhtLQUI0eORMuWLSGVNm4oKDszASa0d0BPd0vwajGKaMyElaaITMBFZxcLeNhIjCYVyvXr16FWq7FmzRq88sor8PLywr///suo4+3tjatXrzLKXj729fVFXFwcoywuLg5+fn71ksvX1xcJCQkoLCxktMdms+Ht7a11O3w+HyoVcz82Li4OQ4cOxfjx4xEYGAh3d3fcu3evTvJpM26UhmFQBWZqvic+Pj6GFq1a5s2bh1dffRWzZs0ySP9sNgudnS0wqZMjXFuIqq3XmAkrtcJItoA5bBb87KTo4WkJK4n2s1ldkpuby1iqi4+Px+PHj+Hp6QmFQoGNGzfiwYMH2LFjBzZv3sy4ds6cOThy5AiioqKQkpKCLVu24OjRo4xkmu+//z6io6PxzTffICUlBVFRUdi/fz8WLFhQL3nHjRsHoVCIsLAw3L59G2fOnMGcOXMwYcIE2Nraat2Oq6srzp07h3/++UezN9W6dWucPHkSFy9eRGJiImbOnImnT5/WST5txo3SMOgMrBr8/f01VknlnwsXLhharGrZtGlTJasvQ2Ah4mFkoD2G+NnA8qXwRo2dsFIbDBiQHkCZO4GLpQi9WlvBvaUEbANuysXGxiIoKIjxWbp0KQIDAxEVFYVVq1ahTZs22LlzJyIiIhjXBgcHY/PmzYiKikJgYCCOHTuGefPmQSj8z+R/2LBhWL9+PSIjI+Hv748tW7Zg27Zt6NWrV73kFYvFOH78OF68eIFOnTphxIgR6Nu3L7766qs6tbNs2TKkpaXBw8MD1tZlGco//vhjtG/fHqGhoejVqxfs7Ozq/LKtzbhRGoZBrRBrs3yKiorCtm3b8ODBA1haWmLIkCFYvXo1Y4ls69atWLZsGbKyshAaGooePXpg2bJlGssnoMz3JDIyEo8fP4abmxs+/vhjTJgwoVq5lixZgoMHDyI+Pr7aOq6urpg6dSru3r2L3377DRYWFvjwww/x9ttva+rk5ORgwYIF+PXXX1FaWoqOHTti7dq1CAwM1NT5/fffsWzZMty6dQtSqRQ9evTAgQMHAJStpx84cIDxw7GwsMC6deswadIkAMDjx48xf/58nDhxAmw2Gz169MD69evh6urKGOPu3btjzZo1kMvlGDNmDNatW1dp/V7XEEKQlFmIPx9lI6tIAV8bMV40cs6v2nAwE6JY3vj+aFw2Cy6WIri3FEPANbJZqY6YPn06kpKSGFZ6FIouMeoZmDH6nlTkyy+/RGBgIG7evInFixcjPDyc4QMycuRIZGZm4ujRo7h+/Trat2+Pvn374sWLFwCAw4cPY/jw4Rg4cCBu3ryJP/74o5LlVk0oFAqEhoZCJpPh/PnziIuLg1QqxWuvvcbYJK7JD0afsFgs+NpKMbmTI4b42RijvUSj5wQTcNnwsZWir3dL+NrJmpTyioyMREJCAu7fv4+NGzciJiYGYWFhhhaL0oQx6hnYyxjS96S87fI1bFdXV/j6+uLo0aOa82PGjEFeXh6OHDmCCxcuYNCgQcjMzIRAINDU8fT0xMKFCzFjxgx069YN7u7u+PHHH6uUo7YZ2I8//ogVK1YgMTFRs9cgl8thYWGBgwcP4tVXX9XKD6YxeZJXgrtP8/F3bkmj910VLcV81GKQphPEPA7cW4rh1EJkNNE/dM2oUaMQGxuL/Px8uLu7Y86cOQbbk6U0D4w6FuKpU6cQERGBpKQk5OXlQalUoqSkBEVFRRCLxUhOTsbw4cMZ13Tu3Jmh0BITEzFjxgxGneDgYKxfv77Gvr29vfHbb78xyszMzBjHXbt2rXRcHhQ0ISEBBQUFsLKyYtQpLi5GamoqACA+Ph7Tp0+vUY6aKH/blcmYaU9KSko0fQBV+8HcunWr3v02BDszIezMhMgrUSA5swCPsosNGpFDoVaDo8eFCCsJD84tRGhlLmQYNDRFfvnlF0OLQGlmGK0CK/eh+L//+z+sXLkSlpaWuHDhAqZOnQq5XA6xWL8JF8t9T+pLQUEB7O3tERsbW+lceXy4l2d4L8NisfDyBLk8hlt5Hx06dMDOnTsrXVu+GQ3Uzw9G35gJeejk3AIdnSzwvFCOR9nFSM8uQoG8cZWZXKWGSMdOwuYiLhzMhWhlLoSQ13SWCCkUY8NoFVhFHwo2u+wB8/IbXl18TyquxTfE96Qily5dqnTs6+sLAGjfvj2ePHkCLperMah4mYCAAPzxxx+YPHlyleetra01sdkAICUlheHB3759e/z888+wsbGpNDs0FVgsFqylAlhLBejoZIGsQjnSs4vwKKcYeY3gLyZXEYgaqGNYACwlPNjKBLA1E0DCN9qfFYXSpDD4L63c96QiVlZWDB+KIUOGIC4urkrfk5CQEERFRWHIkCE4ffp0lb4no0aNQlBQEPr164fff/8d+/fvrzWfkFKpxJMnTxhlLBaL4V8SFxeH1atXY9iwYTh58iT27Nmj2Vfr168funbtimHDhmH16tUaJ8Zyw42OHTvis88+Q9++feHh4YExY8ZAqVTiyJEjWLRoEQCgT58++Oqrr9C1a1eoVCosWrSIMZsaN24cvvzySwwdOhTLli2Do6MjHj16hP3792PhwoVwdHTU/h9hJFhJ+LCS8BHkaIGcYgUeZRfhaX4psorkekl7olITsFh1cwdjscocjs2FXLSU8mEjE4Bn4FBPFEpzxOAKrNz3pCJTp07Fd999p/Gh+OCDDxASEoKIiAhMnDhRU6/c92Tp0qX4+OOPERoainnz5jH8QCr6noSHh8PNzU0r35M7d+7A3t6eUSYQCFBS8p/xwfz583Ht2jUsXboUZmZmiIqKQmhoKIAyZXfkyBF89NFHmDx5Mp49ewY7OzuEhIRolGCvXr2wZ88eLF++HF988QXMzMwQEhKiaX/NmjWYPHkyevTogVatWmH9+vW4fv265rxYLMa5c+ewaNEivPHGG8jPz4eDgwP69u1rsjOyiliIeLAQlUW+J4Qgt0SJrEI5nhfKkVOsQE6JAqXKhi+FctnV5wTjslkwE3LLPiIezIVcyARcsJuoIQaFYko0uWj0jeV7om0Ea4p+KVaokFOsQF6JEqVKFeQqArlKXfZRqiv8TaBQqUFQtuTH5bDAZbPAZbNhLxWCxQL4XDYEHDb4XDbEfA7MhFxI+Jwmb3xBoZgqBp+BNZTIyEj0798fEokER48eRUxMDDZt2mRosSiNhIjHgYjHgb0WE05CCNTEeJJYUiiUhmHyCuzKlStYvXq1xvdkw4YNmDZtmqHFohghLBYLRhIfl0Kh6IAmt4RIoVAolOYBNZ2iUCgUiklCFRiFQqFQTBKqwCgUSqMRHR2tiUTTEFgsltYxVClNF6rAKJRGwFiTtxYVFeGDDz6Ah4cHhEIhrK2t0bNnT/z666+aOq6urpoYnxSKMWHyVogUCqX+zJo1C5cvX8bGjRvh5+eHrKwsXLx4EVlZWXVqR6VSgcViacK+USiNAf22NTNiY2PBYrE06WZ0taSjDfXpq1evXs3CWTwqKgpt27aFRCKBk5MTZs+ejYKCAkadrVu3wsnJCWKxGMOHD0dUVFSl8fzmm2/g4eEBPp8Pb29v7Nixo8Z+f/vtN3z44YcYOHAgXF1d0aFDB8yZMwdTpkwBUDb+jx49wrx588BisTRO3eX/y99++w1+fn4QCARIT09HdnY2Jk6ciBYtWkAsFmPAgAFISUmp1O/BgwfRunVrCIVChIaG4vHjx4zzv/76K9q3bw+hUAh3d3csXboUSqX+Y2NSTAuqwKrBWJd8lixZonmQlAcKnjdvXqWHnTEyevRo3Lt3r07X7N+/H8uXL9eTRMaDoZK32tnZ4ciRI8jPz6/y/P79++Ho6Ihly5YhIyODEVy6qKgIq1atwnfffYc7d+7AxsYGkyZNwrVr1/Dbb7/hzz//BCEEAwcOZGRRKCoqwsqVK7F9+3bExcUhJycHY8aM0Zw/f/48Jk6ciPDwcNy9exdbtmxBdHR0pfulUEAoVRIWFkaGDh1qaDEq8dlnnxF/f3+SkZFBHj9+THbv3k3EYjGZMWOGVtefOXOGACDZ2dmEEEK2bdtGzM3N9Sfw/5DL5Xrvw5ip6/dpz549xMrKSnM8evRoMmjQIEadcePGMf533bp1I9OnT2fUGTlyJBk4cGC1/Zw9e5Y4OjoSHo9HOnbsSObOnUsuXLjAqOPi4kLWrl3LKNu2bRsBQOLj4zVl9+7dIwBIXFycpuz58+dEJBKRX375hXHdpUuXNHUSExMJAHL58mVCCCF9+/Yln3/+OaO/HTt2EHt7e80xAHLgwIFq74vSPKAzsHpiqCUfAOByubCzs4OjoyNGjx6NcePGaZJvqtVqREREwM3NDSKRCIGBgdi7d2+d7q225ZukpCR0794dQqEQfn5+OHXqFMMqLC0tDSwWCz///DN69uwJoVCInTt3VlpCXLJkCdq1a4cdO3bA1dUV5ubmGDNmDGM20FyWEE+dOoW+ffvCwcEBMpkMEyZMQFZWliZ9TnJyMjp37sy45uXjxMREBAcHM8qCg4ORmJhYbb8hISF48OAB/vjjD4wYMQJ37txBjx49tJr18vl8BAQEMPrncrno0qWLpszKygre3t4MGbhcLjp16qQ59vHxgYWFhaZOQkICli1bBqlUqvlMnz4dGRkZjHRCFApVYPXEUEs+VSESiSCXywEAERER2L59OzZv3ow7d+5g3rx5GD9+PM6ePatVW7Ut36hUKgwbNgxisRiXL1/Gt99+i48++qjKthYvXozw8HAkJiZqovS/TGpqKg4ePIhDhw7h0KFDOHv2LL744os63b+pU568NSAgAPv27cP169fx9ddfA4Dm/6pPeDweevTogUWLFuHEiRNYtmwZli9fXmvfIpFIL4GOCwoKsHTpUsTHx2s+t27dQkpKCoRCoc77o5gu1AqxnlScFbi6umLFihWYNWuWJpDwxo0bMWDAACxYsAAA4OXlhYsXL+LQoUOa6yIjIzFp0iTMnj0bAPDee+/h0qVLiIyMRO/evbWS4/r16/jpp5/Qp08flJaW4vPPP8epU6fQtWtXAIC7uzsuXLiALVu2oGfPnrW2t3TpUixevFiTANTd3R3Lly/HwoUL8dlnn+HkyZNITU1FbGws7OzsAAArV65E//79qxyjN954o8b+1Go1oqOjIZPJAAATJkzAH3/80az2O4wteaufnx+USiVKSkrA5/PB5/OhUtWeKdvX1xdKpRKXL19Gt27dAABZWVlITk5myKBUKnHt2jXNDDI5ORk5OTmMZLDJyckNyohOaR5QBVZPTp06hYiICCQlJSEvL0/zgy8qKoJYLEZycjKGDx/OuKZz584MBZaYmIgZM2Yw6gQHB2P9+vU19n3r1i1IpVKoVCrI5XIMGjQIX331Fe7fv4+ioqJKykQul1fKuVYdCQkJiIuLYygQlUqlubfk5GQ4OTlplFf5fVVFx44da+3P1dVVo7wAwN7eHpmZmVrJamoYY/LWXr16YezYsejYsSOsrKxw9+5dfPjhh+jdu7cmp5yrqyvOnTuHMWPGQCAQoGXLllW21bp1awwdOhTTp0/Hli1bIJPJsHjxYjg4OGDo0KGaejweD3PmzMGGDRvA5XLxzjvv4JVXXtF8jz799FMMHjwYzs7OGDFiBNhsNhISEnD79m2sWLGiTmNOadrQJcR6YOglH29vb8THxyMxMRHFxcX47bffYGtrq9mDO3z4MGP55e7du1rvg+ly+UYikdRap2KGaaAswoJa3fAklcZIefLWip+lS5ciMDBQk7y1TZs22LlzJyIiIhjXlidvjYqKQmBgII4dO4Z58+Yx/icVk7f6+/tjy5YttSZvDQ0NRUxMDF599VX4+vpizpw5CA0NZcwAly1bhrS0NHh4eMDa2rrGe9y2bRs6dOiAwYMHo2vXriCE4MiRI4z/s1gsxqJFi/DWW28hODgYUqkUP//8M0OmQ4cO4cSJE+jUqRNeeeUVrF27Fi4uLtoONaW5YGgrEmOlJquxvXv3Eh6PR1QqlaZs+fLlDOu+0aNHk8GDBzOuGz9+vFZWYy9bm1Xks88+I4GBgVWey8vLIwKBgGzfvr3a62uzQuzWrRuZMmVKtdcfPXqUcLlc8uTJE03ZqVOnGFZhDx8+JADIzZs3Gde+3FdV97J27Vri4uKiOe7ZsycJDw+vVp7mzLRp00j37t0NLQaFYjDoEmINGOOST03IZDIsWLAA8+bNg1qtRvfu3ZGbm4u4uDiYmZkx9kaqo7blm/79+8PDwwNhYWGaPGwff/wxANDMxXqGJm+lUF7C0BrUWAkLCyMAKn2mTp1KCCEkKiqK2NvbE5FIREJDQ8n27dsZMxtCCPn222+Jg4MDEYlEZNiwYWTFihXEzs6O0c+mTZuIu7s74fF4xMvLq8bZEyE1z8AIIUStVpN169YRb29vwuPxiLW1NQkNDSVnz54lhGjnB3bs2DHSrVs3IhKJiJmZGencuTP59ttvNecTExNJcHAw4fP5xMfHh/z+++8EADl27BghhM7A9MXIkSOJtbU1EQqFxM/Pj3zzzTeGFolCMSg0oWUjMn36dCQlJeH8+fOGFkWnxMXFoXv37rh//z48PDwMLQ6FQmkm0CVEPdJUl3wOHDgAqVSK1q1b4/79+wgPD0dwcDBVXhQKpVGhCkyPXLlyRbNP5O7ujg0bNmDatGmGFqvB5OfnY9GiRUhPT0fLli3Rr18/rFmzxtBiUSiUZgZdQqRQKBSKSUL9wCgUCoViklAFRqFQKBSThCowCoVCoZgkVIFRKBQKxSShCoxCoVAoJglVYBQKhUIxSagCo1AoFIpJQhUYhUKhUEyS/wc3iP6f7AD+1AAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "#'Nombre', 'Ubicación', 'Superficie (km²)', 'Profundidad máxima (m)', 'Profundidad media (m)'\n",
        "\n",
        "#contamos las ubicaciones, definido con x para hacer corto el nombre de la variable\n",
        "x = lagos_csv['Superficie (km²)'].value_counts().head(10)\n",
        "\n",
        "#configuramos el gráfico de torta, sus colores, los nombres de las \"porciones\" y sus tamaños.\n",
        "colors = plt.get_cmap('Blues')(np.linspace(0.7, 0.2, len(x)))\n",
        "labels = lagos_csv['Nombre'].head(10)\n",
        "sizes = x\n",
        "\n",
        "#juntamos todos los datos anteriores y mostramos el gráfico\n",
        "fig, ax = plt.subplots()\n",
        "ax.pie(sizes, labels=labels, colors=colors, labeldistance=1.2)\n",
        "\n",
        "plt.title('Los 10 lagos con mayor superficie')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7f04c70b-748c-4877-9a7c-e0db4af544ce",
      "metadata": {
        "id": "7f04c70b-748c-4877-9a7c-e0db4af544ce"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c74c400f-0e27-4f89-affb-03321f1c9ce5",
      "metadata": {
        "id": "c74c400f-0e27-4f89-affb-03321f1c9ce5",
        "outputId": "c5e75531-f54c-486c-880d-4ed530ff27c0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index          Nombre   Ubicación  Superficie (km²)  \\\n",
              "0      0  Lago Argentino  Santa Cruz              1435   \n",
              "\n",
              "   Profundidad máxima (m)  Profundidad media (m)            Coordenadas  \n",
              "0                   500.0                  150.0  50°14'53\"S 72°38'43\"O  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17559b65-5246-4145-88ed-603135e35a3b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Nombre</th>\n",
              "      <th>Ubicación</th>\n",
              "      <th>Superficie (km²)</th>\n",
              "      <th>Profundidad máxima (m)</th>\n",
              "      <th>Profundidad media (m)</th>\n",
              "      <th>Coordenadas</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Lago Argentino</td>\n",
              "      <td>Santa Cruz</td>\n",
              "      <td>1435</td>\n",
              "      <td>500.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>50°14'53\"S 72°38'43\"O</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17559b65-5246-4145-88ed-603135e35a3b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-17559b65-5246-4145-88ed-603135e35a3b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-17559b65-5246-4145-88ed-603135e35a3b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"lagos_csv[lagos_csv['Nombre']=='Lago Argentino']\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nombre\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Lago Argentino\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ubicaci\\u00f3n\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Santa Cruz\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Superficie (km\\u00b2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1435,\n        \"max\": 1435,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1435\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profundidad m\\u00e1xima (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 500.0,\n        \"max\": 500.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profundidad media (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 150.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Coordenadas\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"50\\u00b014'53\\\"S 72\\u00b038'43\\\"O\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 96
        }
      ],
      "source": [
        "lagos_csv[lagos_csv['Nombre']=='Lago Argentino'].reset_index()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1ffaef84-5c31-4d77-8011-01eda8dbc8d3",
      "metadata": {
        "id": "1ffaef84-5c31-4d77-8011-01eda8dbc8d3",
        "outputId": "e2472009-45ad-4c3d-d1b7-2b61a5e9c77b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 768
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    index              Nombre Ubicación  Superficie (km²)  \\\n",
              "0       9  Lago Huechulafquen   Neuquén                84   \n",
              "1      10         Lago Traful   Neuquén                78   \n",
              "2      14        Lago Aluminé   Neuquén                58   \n",
              "3      15          Lago Lácar   Neuquén                53   \n",
              "4      23         Lago Espejo   Neuquén                40   \n",
              "5      27          Lago Lolog   Neuquén                37   \n",
              "6      29         Lago Tromen   Neuquén                29   \n",
              "7      31        Lago Quillén   Neuquén                26   \n",
              "8      34       Lago Moquehue   Neuquén                21   \n",
              "9      35     Lago Correntoso   Neuquén                20   \n",
              "10     41         Lago Paimún   Neuquén                16   \n",
              "11     45      Lago Meliquina   Neuquén                14   \n",
              "12     47        Lago Currhué   Neuquén                12   \n",
              "13     48        Lago Falkner   Neuquén                11   \n",
              "\n",
              "    Profundidad máxima (m)  Profundidad media (m)            Coordenadas  \n",
              "0                      NaN                  142.0  39°46'28\"S 71°30'32\"O  \n",
              "1                      NaN                    NaN  40°37'50\"S 71°24'55\"O  \n",
              "2                    165.0                   64.0   38°55'18\"S 71°7'35\"O  \n",
              "3                    277.0                  166.0   40°9'45\"S 71°26'11\"O  \n",
              "4                      NaN                    NaN  40°40'33\"S 71°42'40\"O  \n",
              "5                      NaN                    NaN   40°2'10\"S 71°32'11\"O  \n",
              "6                      NaN                   69.0  39°31'33\"S 71°26'52\"O  \n",
              "7                      NaN                    NaN  39°24'41\"S 71°18'52\"O  \n",
              "8                      NaN                    NaN  38°54'16\"S 71°16'26\"O  \n",
              "9                      NaN                    NaN   40°42'8\"S 71°39'35\"O  \n",
              "10                     NaN                   66.0   39°43'27\"S 71°35'2\"O  \n",
              "11                     NaN                    NaN  40°19'60\"S 71°19'10\"O  \n",
              "12                     NaN                    NaN  39°50'24\"S 71°30'27\"O  \n",
              "13                     NaN                    NaN   40°29'6\"S 71°28'33\"O  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fcbfbd7d-bb36-4fb6-b9b5-bdf28b0d5a03\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Nombre</th>\n",
              "      <th>Ubicación</th>\n",
              "      <th>Superficie (km²)</th>\n",
              "      <th>Profundidad máxima (m)</th>\n",
              "      <th>Profundidad media (m)</th>\n",
              "      <th>Coordenadas</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>9</td>\n",
              "      <td>Lago Huechulafquen</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>84</td>\n",
              "      <td>NaN</td>\n",
              "      <td>142.0</td>\n",
              "      <td>39°46'28\"S 71°30'32\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10</td>\n",
              "      <td>Lago Traful</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>78</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>40°37'50\"S 71°24'55\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>14</td>\n",
              "      <td>Lago Aluminé</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>58</td>\n",
              "      <td>165.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>38°55'18\"S 71°7'35\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>15</td>\n",
              "      <td>Lago Lácar</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>53</td>\n",
              "      <td>277.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>40°9'45\"S 71°26'11\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>23</td>\n",
              "      <td>Lago Espejo</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>40</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>40°40'33\"S 71°42'40\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>27</td>\n",
              "      <td>Lago Lolog</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>37</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>40°2'10\"S 71°32'11\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>29</td>\n",
              "      <td>Lago Tromen</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>29</td>\n",
              "      <td>NaN</td>\n",
              "      <td>69.0</td>\n",
              "      <td>39°31'33\"S 71°26'52\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>31</td>\n",
              "      <td>Lago Quillén</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>26</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39°24'41\"S 71°18'52\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>34</td>\n",
              "      <td>Lago Moquehue</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>21</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>38°54'16\"S 71°16'26\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>35</td>\n",
              "      <td>Lago Correntoso</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>20</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>40°42'8\"S 71°39'35\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>41</td>\n",
              "      <td>Lago Paimún</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>16</td>\n",
              "      <td>NaN</td>\n",
              "      <td>66.0</td>\n",
              "      <td>39°43'27\"S 71°35'2\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>45</td>\n",
              "      <td>Lago Meliquina</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>14</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>40°19'60\"S 71°19'10\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>47</td>\n",
              "      <td>Lago Currhué</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39°50'24\"S 71°30'27\"O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>48</td>\n",
              "      <td>Lago Falkner</td>\n",
              "      <td>Neuquén</td>\n",
              "      <td>11</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>40°29'6\"S 71°28'33\"O</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fcbfbd7d-bb36-4fb6-b9b5-bdf28b0d5a03')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fcbfbd7d-bb36-4fb6-b9b5-bdf28b0d5a03 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fcbfbd7d-bb36-4fb6-b9b5-bdf28b0d5a03');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8c04a970-e156-4586-9985-00dcc715b135\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8c04a970-e156-4586-9985-00dcc715b135')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8c04a970-e156-4586-9985-00dcc715b135 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"lagos_csv[lagos_csv['Ubicaci\\u00f3n']=='Neuqu\\u00e9n']\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 9,\n        \"max\": 48,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          35,\n          45,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nombre\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Lago Correntoso\",\n          \"Lago Meliquina\",\n          \"Lago Huechulafquen\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ubicaci\\u00f3n\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Neuqu\\u00e9n\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Superficie (km\\u00b2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 11,\n        \"max\": 84,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profundidad m\\u00e1xima (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 79.19595949289332,\n        \"min\": 165.0,\n        \"max\": 277.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          277.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profundidad media (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.793442182326096,\n        \"min\": 64.0,\n        \"max\": 166.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          64.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Coordenadas\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"40\\u00b042'8\\\"S 71\\u00b039'35\\\"O\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 104
        }
      ],
      "source": [
        "lagos_csv[lagos_csv['Ubicación']=='Neuquén'].reset_index()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "07e06e15-5983-422d-8c6f-e024e0b4d490",
      "metadata": {
        "id": "07e06e15-5983-422d-8c6f-e024e0b4d490"
      },
      "source": [
        "* Buscar portales con sitios abiertos completar con\n",
        "    * url\n",
        "    * Jurisdicción\n",
        "    * Tipo de archivos encontrados\n",
        "    * Descripción sobre los datos\n",
        "* Completar con tres por lo menos, cumpliendo con:\n",
        "    * Uno de Argentina\n",
        "    * Uno del resto de América\n",
        "    * Uno del resto del mundo\n",
        "* Completar en un paddlet con el gráfico realizado por cada grupo"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "* https://www.indec.gob.ar/indec/web/Institucional-Indec-BasesDeDatos , Argentina, archios: txt, xls, csv, SPSS, Stata, zip. En este sitio encontramos datos referidos a la población argentina como los gatos en los hogares, sobre el mercado laboral, la salud, sobre el Perfil de las Personas con Discapacidad 2018, y sobre el uso del tiempo.\n",
        "\n",
        "* https://data.gov/ , Estados Unidos, archivos: csv, rdf, json, xml, html, zip, Esri REST, xls. Encontramos datos recopilados del país como la tasa de muerte por suicidio, racismo, sexo, origen hispano y edad, o la información de los crímenes del 2020 a la actualidad, o los precios de las frutas y de los vegetales, entre otros datos variados.\n",
        "\n",
        "* https://datos.gob.es , España, archivos: csv, xml, json, xsl, xsxl, pdf. Se pueden encontrar datos sobre la infraestructura aeronáutica, sobre los espacios laborales, sobre los contratos de Baños de Ebro, y sobre los fondos de cooperación municipal, entre otros."
      ],
      "metadata": {
        "id": "Gdtp0yqIMgzx"
      },
      "id": "Gdtp0yqIMgzx"
    },
    {
      "cell_type": "markdown",
      "id": "9e86b6c1-29d7-4600-af80-8c447c38c0f7",
      "metadata": {
        "id": "9e86b6c1-29d7-4600-af80-8c447c38c0f7"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "afa5595a-604a-440f-beea-ce1e26a118e4",
      "metadata": {
        "id": "afa5595a-604a-440f-beea-ce1e26a118e4"
      },
      "source": [
        "# Ordenar\n",
        "Trabajemos con el archivo del último censo, el archivo fue modificado para ser más fácil su análisis\n",
        "* [Censo 2022]('files/c2022_tp_c_resumen_adaptado.csv')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NRCt_bCfVqKa"
      },
      "source": [
        "### Censo 2022: Total de población\n",
        "* Ordenar las jurisdicciones de mayor a menor población."
      ],
      "id": "NRCt_bCfVqKa"
    },
    {
      "cell_type": "code",
      "source": [
        "# prueba\n",
        "import pandas as pd\n",
        "censo = pd.read_csv('c2022_tp_c_resumen_adaptado.csv')\n",
        "\n",
        "df_sorted = censo.sort_values(by='Total de población', ascending=False)\n",
        "print(df_sorted[['Total de población', 'Jurisdicción']])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GQQMFkUpV8N7",
        "outputId": "ac857934-0350-4a72-9404-32a0b8c328d4"
      },
      "id": "GQQMFkUpV8N7",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Total de población                                       Jurisdicción\n",
            "0             45892285                                     Total del país\n",
            "2             17523996                                       Buenos Aires\n",
            "6              3840905                                            Córdoba\n",
            "21             3544908                                           Santa Fe\n",
            "1              3121707                    Ciudad Autónoma de Buenos Aires\n",
            "13             2043540                                            Mendoza\n",
            "24             1731820                                            Tucumán\n",
            "17             1441351                                              Salta\n",
            "8              1425578                                         Entre Ríos\n",
            "14             1278873                                           Misiones\n",
            "7              1212696                                         Corrientes\n",
            "4              1129606                                              Chaco\n",
            "22             1060906                                Santiago del Estero\n",
            "18              822853                                           San Juan\n",
            "10              811611                                              Jujuy\n",
            "16              750768                                          Rio Negro\n",
            "15              710814                                            Neuquén\n",
            "9               607419                                            Formosa\n",
            "5               592621                                             Chubut\n",
            "19              542069                                           San Luis\n",
            "3               429562                                          Catamarca\n",
            "12              383865                                           La Rioja\n",
            "11              361859                                           La Pampa\n",
            "20              337226                                         Santa Cruz\n",
            "23              185732  Tierra del Fuego, Antártida e Islas del Atlánt...\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.7"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}